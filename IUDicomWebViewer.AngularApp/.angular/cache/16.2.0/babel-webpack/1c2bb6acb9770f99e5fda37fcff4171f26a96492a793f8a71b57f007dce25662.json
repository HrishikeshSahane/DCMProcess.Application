{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { Constants, ResponseMode, OIDC_DEFAULT_SCOPES, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { RESPONSE_TYPE, RESPONSE_MODE, NATIVE_BROKER, SCOPE, CLIENT_ID, REDIRECT_URI, POST_LOGOUT_URI, ID_TOKEN_HINT, DOMAIN_HINT, LOGIN_HINT, SID, CLAIMS, CLIENT_REQUEST_ID, X_CLIENT_SKU, X_CLIENT_VER, X_CLIENT_OS, X_CLIENT_CPU, X_APP_NAME, X_APP_VER, PROMPT, STATE, NONCE, CODE_CHALLENGE, CODE_CHALLENGE_METHOD, CODE, DEVICE_CODE, REFRESH_TOKEN, CODE_VERIFIER, CLIENT_SECRET, CLIENT_ASSERTION, CLIENT_ASSERTION_TYPE, OBO_ASSERTION, REQUESTED_TOKEN_USE, GRANT_TYPE, TOKEN_TYPE, REQ_CNF, X_CLIENT_CURR_TELEM, X_CLIENT_LAST_TELEM, X_MS_LIB_CAPABILITY, LOGOUT_HINT } from '../constants/AADServerParamKeys.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\nimport { pkceParamsMissing, invalidClaims } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n  constructor() {\n    this.parameters = new Map();\n  }\n  /**\n   * add response_type = code\n   */\n  addResponseTypeCode() {\n    this.parameters.set(RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  }\n  /**\n   * add response_type = token id_token\n   */\n  addResponseTypeForTokenAndIdToken() {\n    this.parameters.set(RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n  }\n  /**\n   * add response_mode. defaults to query.\n   * @param responseMode\n   */\n  addResponseMode(responseMode) {\n    this.parameters.set(RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  }\n  /**\n   * Add flag to indicate STS should attempt to use WAM if available\n   */\n  addNativeBroker() {\n    this.parameters.set(NATIVE_BROKER, encodeURIComponent(\"1\"));\n  }\n  /**\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n   * @param scopeSet\n   * @param addOidcScopes\n   */\n  addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n      defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  }\n  /**\n   * add clientId\n   * @param clientId\n   */\n  addClientId(clientId) {\n    this.parameters.set(CLIENT_ID, encodeURIComponent(clientId));\n  }\n  /**\n   * add redirect_uri\n   * @param redirectUri\n   */\n  addRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(REDIRECT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add post logout redirectUri\n   * @param redirectUri\n   */\n  addPostLogoutRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add id_token_hint to logout request\n   * @param idTokenHint\n   */\n  addIdTokenHint(idTokenHint) {\n    this.parameters.set(ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  }\n  /**\n   * add domain_hint\n   * @param domainHint\n   */\n  addDomainHint(domainHint) {\n    this.parameters.set(DOMAIN_HINT, encodeURIComponent(domainHint));\n  }\n  /**\n   * add login_hint\n   * @param loginHint\n   */\n  addLoginHint(loginHint) {\n    this.parameters.set(LOGIN_HINT, encodeURIComponent(loginHint));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\n   * @param loginHint\n   */\n  addCcsUpn(loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for account object\n   * @param loginHint\n   */\n  addCcsOid(clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n  }\n  /**\n   * add sid\n   * @param sid\n   */\n  addSid(sid) {\n    this.parameters.set(SID, encodeURIComponent(sid));\n  }\n  /**\n   * add claims\n   * @param claims\n   */\n  addClaims(claims, clientCapabilities) {\n    const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(CLAIMS, encodeURIComponent(mergedClaims));\n  }\n  /**\n   * add correlationId\n   * @param correlationId\n   */\n  addCorrelationId(correlationId) {\n    this.parameters.set(CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  }\n  /**\n   * add library info query params\n   * @param libraryInfo\n   */\n  addLibraryInfo(libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  }\n  /**\n   * Add client telemetry parameters\n   * @param appTelemetry\n   */\n  addApplicationTelemetry(appTelemetry) {\n    if (appTelemetry?.appName) {\n      this.parameters.set(X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry?.appVersion) {\n      this.parameters.set(X_APP_VER, appTelemetry.appVersion);\n    }\n  }\n  /**\n   * add prompt\n   * @param prompt\n   */\n  addPrompt(prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(`${PROMPT}`, encodeURIComponent(prompt));\n  }\n  /**\n   * add state\n   * @param state\n   */\n  addState(state) {\n    if (state) {\n      this.parameters.set(STATE, encodeURIComponent(state));\n    }\n  }\n  /**\n   * add nonce\n   * @param nonce\n   */\n  addNonce(nonce) {\n    this.parameters.set(NONCE, encodeURIComponent(nonce));\n  }\n  /**\n   * add code_challenge and code_challenge_method\n   * - throw if either of them are not passed\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw createClientConfigurationError(pkceParamsMissing);\n    }\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addAuthorizationCode(code) {\n    this.parameters.set(CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addDeviceCode(code) {\n    this.parameters.set(DEVICE_CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `refreshToken` passed by the user\n   * @param refreshToken\n   */\n  addRefreshToken(refreshToken) {\n    this.parameters.set(REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  }\n  /**\n   * add the `code_verifier` passed by the user to exchange for a token\n   * @param codeVerifier\n   */\n  addCodeVerifier(codeVerifier) {\n    this.parameters.set(CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  }\n  /**\n   * add client_secret\n   * @param clientSecret\n   */\n  addClientSecret(clientSecret) {\n    this.parameters.set(CLIENT_SECRET, encodeURIComponent(clientSecret));\n  }\n  /**\n   * add clientAssertion for confidential client flows\n   * @param clientAssertion\n   */\n  addClientAssertion(clientAssertion) {\n    if (clientAssertion) {\n      this.parameters.set(CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  }\n  /**\n   * add clientAssertionType for confidential client flows\n   * @param clientAssertionType\n   */\n  addClientAssertionType(clientAssertionType) {\n    if (clientAssertionType) {\n      this.parameters.set(CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  }\n  /**\n   * add OBO assertion for confidential client flows\n   * @param clientAssertion\n   */\n  addOboAssertion(oboAssertion) {\n    this.parameters.set(OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addRequestTokenUse(tokenUse) {\n    this.parameters.set(REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addGrantType(grantType) {\n    this.parameters.set(GRANT_TYPE, encodeURIComponent(grantType));\n  }\n  /**\n   * add client info\n   *\n   */\n  addClientInfo() {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  }\n  /**\n   * add extraQueryParams\n   * @param eQParams\n   */\n  addExtraQueryParameters(eQParams) {\n    const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(key => {\n      this.parameters.set(key, eQParams[key]);\n    });\n  }\n  addClientCapabilitiesToClaims(claims, clientCapabilities) {\n    let mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw createClientConfigurationError(invalidClaims);\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  }\n  /**\n   * adds `username` for Password Grant flow\n   * @param username\n   */\n  addUsername(username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  }\n  /**\n   * adds `password` for Password Grant flow\n   * @param password\n   */\n  addPassword(password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  }\n  /**\n   * add pop_jwk to query params\n   * @param cnfString\n   */\n  addPopToken(cnfString) {\n    if (cnfString) {\n      this.parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(REQ_CNF, encodeURIComponent(cnfString));\n    }\n  }\n  /**\n   * add SSH JWK and key ID to query params\n   */\n  addSshJwk(sshJwkString) {\n    if (sshJwkString) {\n      this.parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  }\n  /**\n   * add server telemetry fields\n   * @param serverTelemetryManager\n   */\n  addServerTelemetry(serverTelemetryManager) {\n    this.parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  }\n  /**\n   * Adds parameter that indicates to the server that throttling is supported\n   */\n  addThrottling() {\n    this.parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  }\n  /**\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n   */\n  addLogoutHint(logoutHint) {\n    this.parameters.set(LOGOUT_HINT, encodeURIComponent(logoutHint));\n  }\n  /**\n   * Utility to create a URL from the params map\n   */\n  createQueryString() {\n    const queryParameterArray = new Array();\n    this.parameters.forEach((value, key) => {\n      queryParameterArray.push(`${key}=${value}`);\n    });\n    return queryParameterArray.join(\"&\");\n  }\n}\nexport { RequestParameterBuilder };\n//# sourceMappingURL=RequestParameterBuilder.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}