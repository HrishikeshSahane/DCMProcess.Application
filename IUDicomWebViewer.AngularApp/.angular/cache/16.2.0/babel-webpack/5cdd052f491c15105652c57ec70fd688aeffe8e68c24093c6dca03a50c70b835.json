{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER } from '../cache/BrowserCacheManager.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { blockAPICallsBeforeInitialize, blockNonBrowserEnvironment } from '../utils/BrowserUtils.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * UnknownOperatingContextController class\n *\n * - Until initialize method is called, this controller is the default\n * - AFter initialize method is called, this controller will be swapped out for the appropriate controller\n * if the operating context can be determined; otherwise this controller will continued be used\n *\n * - Why do we have this?  We don't want to dynamically import (download) all of the code in StandardController if we don't need to.\n *\n * - Only includes implementation for getAccounts and handleRedirectPromise\n *   - All other methods are will throw initialization error (because either initialize method or the factory method were not used)\n *   - This controller is necessary for React Native wrapper, server side rendering and any other scenario where we don't have a DOM\n *\n */\nclass UnknownOperatingContextController {\n  constructor(operatingContext) {\n    // Flag representing whether or not the initialize API has been called and completed\n    this.initialized = false;\n    this.operatingContext = operatingContext;\n    this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();\n    this.config = operatingContext.getConfig();\n    this.logger = operatingContext.getLogger();\n    // Initialize performance client\n    this.performanceClient = this.config.telemetry.client;\n    // Initialize the crypto class.\n    this.browserCrypto = this.isBrowserEnvironment ? new CryptoOps(this.logger, this.performanceClient) : DEFAULT_CRYPTO_IMPLEMENTATION;\n    // Initialize the browser storage class.\n    this.browserStorage = this.isBrowserEnvironment ? new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger) : DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);\n    this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n  }\n  getBrowserStorage() {\n    return this.browserStorage;\n  }\n  getEventHandler() {\n    return this.eventHandler;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccount(accountFilter) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByHomeId(homeAccountId) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByLocalId(localAccountId) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByUsername(username) {\n    return null;\n  }\n  getAllAccounts() {\n    return [];\n  }\n  initialize() {\n    this.initialized = true;\n    return Promise.resolve();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenPopup(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenRedirect(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return Promise.resolve();\n  }\n  acquireTokenSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  silentRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  acquireTokenByCode(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  acquireTokenNative(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  apiId,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  accountId) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  acquireTokenByRefreshToken(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  commonRequest,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  silentRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  addEventCallback(callback) {\n    return this.eventHandler.addEventCallback(callback);\n  }\n  removeEventCallback(callbackId) {\n    this.eventHandler.removeEventCallback(callbackId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addPerformanceCallback(callback) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return \"\";\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removePerformanceCallback(callbackId) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return true;\n  }\n  enableAccountStorageEvents() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  disableAccountStorageEvents() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  handleRedirectPromise(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hash) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    return Promise.resolve(null);\n  }\n  loginPopup(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loginRedirect(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logout(logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  logoutRedirect(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  logoutPopup(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  ssoSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  getTokenCache() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  getLogger() {\n    return this.logger;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setLogger(logger) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setActiveAccount(account) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  getActiveAccount() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initializeWrapperLibrary(sku, version) {\n    this.browserStorage.setWrapperMetadata(sku, version);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setNavigationClient(navigationClient) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  isBrowserEnv() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return true;\n  }\n  getBrowserCrypto() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  getPerformanceClient() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  getRedirectResponse() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n    return {};\n  }\n  preflightBrowserEnvironmentCheck(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interactionType,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isAppEmbedded) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment(this.isBrowserEnvironment);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  clearCache(logoutRequest) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      blockAPICallsBeforeInitialize(_this.initialized);\n      blockNonBrowserEnvironment(_this.isBrowserEnvironment);\n    })();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hydrateCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  result,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      blockAPICallsBeforeInitialize(_this2.initialized);\n      blockNonBrowserEnvironment(_this2.isBrowserEnvironment);\n    })();\n  }\n}\nexport { UnknownOperatingContextController };\n//# sourceMappingURL=UnknownOperatingContextController.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}