{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { Constants } from './Constants.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { noCryptoObject, invalidState } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nclass ProtocolUtils {\n  /**\n   * Appends user state with random guid, or returns random guid.\n   * @param userState\n   * @param randomGuid\n   */\n  static setRequestState(cryptoObj, userState, meta) {\n    const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return userState ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n  }\n  /**\n   * Generates the state value used by the common library.\n   * @param randomGuid\n   * @param cryptoObj\n   */\n  static generateLibraryState(cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw createClientAuthError(noCryptoObject);\n    }\n    // Create a state object containing a unique id and the timestamp of the request creation\n    const stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n    if (meta) {\n      stateObj.meta = meta;\n    }\n    const stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  }\n  /**\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n   * @param state\n   * @param cryptoObj\n   */\n  static parseRequestState(cryptoObj, state) {\n    if (!cryptoObj) {\n      throw createClientAuthError(noCryptoObject);\n    }\n    if (!state) {\n      throw createClientAuthError(invalidState);\n    }\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      const splitState = state.split(Constants.RESOURCE_DELIM);\n      const libraryState = splitState[0];\n      const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;\n      const libraryStateString = cryptoObj.base64Decode(libraryState);\n      const libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: userState || Constants.EMPTY_STRING,\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw createClientAuthError(invalidState);\n    }\n  }\n}\nexport { ProtocolUtils };\n//# sourceMappingURL=ProtocolUtils.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}