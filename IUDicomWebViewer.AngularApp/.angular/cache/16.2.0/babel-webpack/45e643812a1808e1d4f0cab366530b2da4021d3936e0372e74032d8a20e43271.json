{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass EventHandler {\n  constructor(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\n   * Adds event callbacks to array\n   * @param callback\n   */\n  addEventCallback(callback) {\n    if (typeof window !== \"undefined\") {\n      const callbackId = createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(`Event callback registered with id: ${callbackId}`);\n      return callbackId;\n    }\n    return null;\n  }\n  /**\n   * Removes callback with provided id from callback array\n   * @param callbackId\n   */\n  removeEventCallback(callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(`Event callback ${callbackId} removed.`);\n  }\n  /**\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n   */\n  enableAccountStorageEvents() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  }\n  /**\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n   */\n  disableAccountStorageEvents() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  }\n  /**\n   * Emits events by calling callback with event message\n   * @param eventType\n   * @param interactionType\n   * @param payload\n   * @param error\n   */\n  emitEvent(eventType, interactionType, payload, error) {\n    if (typeof window !== \"undefined\") {\n      const message = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(`Emitting event: ${eventType}`);\n      this.eventCallbacks.forEach((callback, callbackId) => {\n        this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\n        callback.apply(null, [message]);\n      });\n    }\n  }\n  /**\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\n   */\n  handleAccountCacheChange(e) {\n    try {\n      const cacheValue = e.newValue || e.oldValue;\n      if (!cacheValue) {\n        return;\n      }\n      const parsedValue = JSON.parse(cacheValue);\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n      const accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      const accountInfo = accountEntity.getAccountInfo();\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  }\n}\nexport { EventHandler };\n//# sourceMappingURL=EventHandler.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}