{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DICOMViewerComponent } from '../../../projects/dicom-viewer/src/lib/dicom-viewer.component';\nimport { delay } from 'rxjs';\nimport { IuDicomwebviewerService } from '../services/iu-dicomwebviewer.service';\nimport { Router } from '@angular/router';\nimport axios from 'axios';\nimport * as JSZip from 'jszip';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/iu-dicomwebviewer.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../projects/dicom-viewer/src/lib/dicom-viewer.component\";\nvar newfiles = [];\nexport let ViewDicomimagesComponent = /*#__PURE__*/(() => {\n  class ViewDicomimagesComponent {\n    constructor(_IuDicomwebviewerService, router) {\n      this._IuDicomwebviewerService = _IuDicomwebviewerService;\n      this.router = router;\n      this.blobServiceUri = '';\n    }\n    ngOnInit() {\n      this.readZip();\n      console.log(\"Before delay\");\n      delay(10000);\n      console.log(\"After delay\");\n      cornerstoneWADOImageLoader.external.cornerstone = cornerstone; // inicializa WADO Image loader\n      // configura codecs e web workers\n      cornerstoneWADOImageLoader.webWorkerManager.initialize({\n        webWorkerPath: './assets/cornerstone/webworkers/cornerstoneWADOImageLoaderWebWorker.js',\n        taskConfiguration: {\n          'decodeTask': {\n            codecsPath: '../codecs/cornerstoneWADOImageLoaderCodecs.js'\n          }\n        }\n      });\n    }\n    /**\n     * Load selected DICOM images\n     *\n     * @param files list of selected dicom files\n     */\n    loadDICOMImages() {\n      if (newfiles && newfiles.length > 0) {\n        let imageList = [];\n        // const fileList:Array<File> = Array.from(files);\n        // fileList.sort((a,b) => {\n        //   if ( a.name > b.name ) return 1;\n        //   if ( b.name > a.name ) return -1;\n        //   return 0;\n        // })\n        //cornerstoneWADOImageLoader.wadouri.fileManager.purge();\n        cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.purge();\n        // loop thru the File list and build a list of wadouri imageIds (dicomfile:)\n        for (let i = 0; i < newfiles.length; i++) {\n          const dicomFile = newfiles[i];\n          const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(dicomFile);\n          imageList.push(imageId);\n        }\n        this.viewPort.resetAllTools();\n        // now load all Images, using their wadouri\n        this.viewPort.loadStudyImages(imageList);\n      } else alert('Escolha imagens DICOM a exibir.');\n    }\n    // async download(){\n    //   console.log(\"Before SASToken call\");\n    //   console.log(this.blobServiceUri);\n    //   const credential = undefined;\n    //   const blobServiceClient = new BlobServiceClient(\"https://iupackagecontainer.blob.core.windows.net?sv=2023-01-03&se=2024-01-03T19%3A51%3A27Z&sr=c&sp=rwl&sig=WbLpS0WNUGV7aW4%2FX%2FgpY8GQHrUz1SnLt9FdxFXS9vY%3D\", credential);\n    //   console.log(\"Starting download\")\n    //   const containerName = 'dicomblob';\n    //   const blobName = '2.57.299.2709.41320.615801.4965911.64446389.zip';\n    //   const timestamp = Date.now();\n    //   const fileName =\"./e2e/Output.zip\";\n    //   // create container client\n    //   console.log(\"Create containerClient\")\n    //   const containerClient:ContainerClient = await blobServiceClient.getContainerClient(\n    //     containerName\n    //   );\n    //   // create blob client\n    //   const blobClient:BlobClient = await containerClient.getBlockBlobClient(blobName);\n    //   console.log(\"Created blob client\")\n    //   // download file\n    //   // headers= {\n    //   //   blobContentType: 'text/plain',\n    //   //   blobContentLanguage: 'en-us',\n    //   //   blobContentEncoding: 'utf-8',\n    //   //   // all other http properties are cleared\n    //   // }\n    //   console.log(\"Downloading blob....\")\n    //   const downloadResponse: BlobDownloadResponseParsed =\n    //   await blobClient.download();\n    //   console.log(\"Printing response\")\n    //   console.log(downloadResponse)  \n    //     var readableStream=downloadResponse.readableStreamBody\n    //     const chunks: Buffer[] = [];\n    //   readableStream.on('data', (data) => {\n    //     const content: Buffer = data instanceof Buffer ? data : Buffer.from(data);\n    //     chunks.push(content);\n    //     const zip = new AdmZip(content);\n    //     zip.getEntries().forEach((entry) => {\n    //       const entryName = entry.entryName;\n    //       const entryPath = path.join(entryName);\n    //       console.log(entryName)\n    //       if (entry.isDirectory) {\n    //         fs.mkdirSync(entryPath, { recursive: true });\n    //       } else {\n    //         const entryContent = zip.readFile(entry);\n    //         fs.writeFileSync(entryPath, entryContent, 'binary');\n    //       }\n    //     });\n    //   });\n    //   console.log(\"Blob has been Downloaded\")\n    // }\n    readZip() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const response = yield axios.get(\"https://localhost:7282/api/Storage/GetDicomFiles\", {\n          responseType: 'arraybuffer'\n        });\n        console.log(response);\n        const zip = yield JSZip.loadAsync(response.data);\n        Object.keys(zip.files).map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (relativePath) {\n            const zipEntry = zip.file(relativePath);\n            if (zipEntry) {\n              const fileContent = yield zipEntry.async('arraybuffer');\n              const fileType = zipEntry.dir ? '' : zipEntry.name.split('.').pop() || '';\n              // Create a File from the Blob\n              const blob = new Blob([fileContent], {\n                type: fileType\n              });\n              const file = new File([blob], zipEntry.name, {\n                type: blob.type\n              });\n              console.log(file.name);\n              yield newfiles.push(file);\n              _this.loadDICOMImages();\n            }\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        // Iterate over each file in the ZIP archive\n        // zip.forEach(async (relativePath, zipEntry) => {\n        //   console.log(zipEntry.name)\n        //   const fileContent = await zip.file(relativePath).async('string');\n        // });\n      })();\n    }\n    static #_ = this.ɵfac = function ViewDicomimagesComponent_Factory(t) {\n      return new (t || ViewDicomimagesComponent)(i0.ɵɵdirectiveInject(i1.IuDicomwebviewerService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ViewDicomimagesComponent,\n      selectors: [[\"app-view-dicomimages\"]],\n      viewQuery: function ViewDicomimagesComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(DICOMViewerComponent, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        }\n      },\n      decls: 3,\n      vars: 3,\n      consts: [[2, \"height\", \"100%\", \"width\", \"100%\"], [2, \"display\", \"flex\", \"height\", \"calc(100% - 90px)\", \"width\", \"100%\"], [2, \"height\", \"100%\", \"width\", \"100%\", \"margin\", \"10px\", 3, \"enableViewerTools\", \"enablePlayTools\", \"maxImagesToLoad\"]],\n      template: function ViewDicomimagesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵelement(2, \"dicom-viewer\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"enableViewerTools\", true)(\"enablePlayTools\", true)(\"maxImagesToLoad\", 20);\n        }\n      },\n      dependencies: [i3.DICOMViewerComponent]\n    });\n  }\n  return ViewDicomimagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}