{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CryptoOps } from './CryptoOps.mjs';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SignedHttpRequest {\n  constructor(shrParameters, shrOptions) {\n    const loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\n   * Generates and caches a keypair for the given request options.\n   * @returns Public key digest, which should be sent to the token issuer.\n   */\n  generatePublicKeyThumbprint() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        kid\n      } = yield _this.popTokenGenerator.generateKid(_this.shrParameters);\n      return kid;\n    })();\n  }\n  /**\n   * Generates a signed http request for the given payload with the given key.\n   * @param payload Payload to sign (e.g. access token)\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @param claims Additional claims to include/override in the signed JWT\n   * @returns Pop token signed with the corresponding private key\n   */\n  signRequest(payload, publicKeyThumbprint, claims) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.popTokenGenerator.signPayload(payload, publicKeyThumbprint, _this2.shrParameters, claims);\n    })();\n  }\n  /**\n   * Removes cached keys from browser for given public key thumbprint\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @returns If keys are properly deleted\n   */\n  removeKeys(publicKeyThumbprint) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    })();\n  }\n}\nexport { SignedHttpRequest };\n//# sourceMappingURL=SignedHttpRequest.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}