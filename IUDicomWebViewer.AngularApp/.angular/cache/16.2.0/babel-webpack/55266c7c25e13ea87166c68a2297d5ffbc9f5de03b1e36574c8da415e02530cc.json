{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PerformanceEvents, ServerError, invokeAsync, CcsCredentialType } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { userCancelled } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nclass InteractionHandler {\n  constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Function to handle response parameters from hash.\n   * @param locationHash\n   */\n  handleCodeResponse(response, request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponse, request.correlationId);\n      let authCodeResponse;\n      try {\n        authCodeResponse = _this.authModule.handleFragmentResponse(response, request.state);\n      } catch (e) {\n        if (e instanceof ServerError && e.subError === userCancelled) {\n          // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n          throw createBrowserAuthError(userCancelled);\n        } else {\n          throw e;\n        }\n      }\n      return invokeAsync(_this.handleCodeResponseFromServer.bind(_this), PerformanceEvents.HandleCodeResponseFromServer, _this.logger, _this.performanceClient, request.correlationId)(authCodeResponse, request);\n    })();\n  }\n  /**\n   * Process auth code response from AAD\n   * @param authCodeResponse\n   * @param state\n   * @param authority\n   * @param networkModule\n   * @returns\n   */\n  handleCodeResponseFromServer(authCodeResponse, request, validateNonce = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, request.correlationId);\n      _this2.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n      // Assign code to request\n      _this2.authCodeRequest.code = authCodeResponse.code;\n      // Check for new cloud instance\n      if (authCodeResponse.cloud_instance_host_name) {\n        yield invokeAsync(_this2.authModule.updateAuthority.bind(_this2.authModule), PerformanceEvents.UpdateTokenEndpointAuthority, _this2.logger, _this2.performanceClient, request.correlationId)(authCodeResponse.cloud_instance_host_name, request.correlationId);\n      }\n      // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n      if (validateNonce) {\n        // TODO: Assigning \"response nonce\" to \"request nonce\" is confusing. Refactor the function doing validation to accept request nonce directly\n        authCodeResponse.nonce = request.nonce || undefined;\n      }\n      authCodeResponse.state = request.state;\n      // Add CCS parameters if available\n      if (authCodeResponse.client_info) {\n        _this2.authCodeRequest.clientInfo = authCodeResponse.client_info;\n      } else {\n        const ccsCred = _this2.createCcsCredentials(request);\n        if (ccsCred) {\n          _this2.authCodeRequest.ccsCredential = ccsCred;\n        }\n      }\n      // Acquire token with retrieved code.\n      const tokenResponse = yield invokeAsync(_this2.authModule.acquireToken.bind(_this2.authModule), PerformanceEvents.AuthClientAcquireToken, _this2.logger, _this2.performanceClient, request.correlationId)(_this2.authCodeRequest, authCodeResponse);\n      return tokenResponse;\n    })();\n  }\n  /**\n   * Build ccs creds if available\n   */\n  createCcsCredentials(request) {\n    if (request.account) {\n      return {\n        credential: request.account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n    } else if (request.loginHint) {\n      return {\n        credential: request.loginHint,\n        type: CcsCredentialType.UPN\n      };\n    }\n    return null;\n  }\n}\nexport { InteractionHandler };\n//# sourceMappingURL=InteractionHandler.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}