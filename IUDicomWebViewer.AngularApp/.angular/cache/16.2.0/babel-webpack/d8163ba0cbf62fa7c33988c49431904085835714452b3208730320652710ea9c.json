{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { toWebStream } from \"./stream\";\nconst unimplementedMethods = {\n  arrayBuffer: () => {\n    throw new Error(\"Not implemented\");\n  },\n  slice: () => {\n    throw new Error(\"Not implemented\");\n  },\n  text: () => {\n    throw new Error(\"Not implemented\");\n  }\n};\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(stream, name, options = {}) {\n  var _a, _b, _c, _d;\n  return Object.assign(Object.assign({}, unimplementedMethods), {\n    type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n    lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n    webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n    size: (_d = options.size) !== null && _d !== void 0 ? _d : -1,\n    name,\n    stream: () => toWebStream(stream())\n  });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(content, name, options = {}) {\n  var _a, _b, _c;\n  return Object.assign(Object.assign({}, unimplementedMethods), {\n    type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n    lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n    webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n    size: content.byteLength,\n    name,\n    arrayBuffer: function () {\n      var _ref = _asyncToGenerator(function* () {\n        return content.buffer;\n      });\n      return function arrayBuffer() {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    stream: () => new Blob([content]).stream()\n  });\n}\n//# sourceMappingURL=file.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}