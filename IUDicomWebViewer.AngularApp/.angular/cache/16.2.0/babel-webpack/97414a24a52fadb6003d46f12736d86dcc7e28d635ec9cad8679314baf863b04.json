{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityMetadataEntity {\n  constructor() {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\n   * Update the entity with new aliases, preferred_cache and preferred_network values\n   * @param metadata\n   * @param fromNetwork\n   */\n  updateCloudDiscoveryMetadata(metadata, fromNetwork) {\n    this.aliases = metadata.aliases;\n    this.preferred_cache = metadata.preferred_cache;\n    this.preferred_network = metadata.preferred_network;\n    this.aliasesFromNetwork = fromNetwork;\n  }\n  /**\n   * Update the entity with new endpoints\n   * @param metadata\n   * @param fromNetwork\n   */\n  updateEndpointMetadata(metadata, fromNetwork) {\n    this.authorization_endpoint = metadata.authorization_endpoint;\n    this.token_endpoint = metadata.token_endpoint;\n    this.end_session_endpoint = metadata.end_session_endpoint;\n    this.issuer = metadata.issuer;\n    this.endpointsFromNetwork = fromNetwork;\n    this.jwks_uri = metadata.jwks_uri;\n  }\n  /**\n   * Save the authority that was used to create this cache entry\n   * @param authority\n   */\n  updateCanonicalAuthority(authority) {\n    this.canonical_authority = authority;\n  }\n  /**\n   * Reset the exiresAt value\n   */\n  resetExpiresAt() {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\n   * Returns whether or not the data needs to be refreshed\n   */\n  isExpired() {\n    return this.expiresAt <= TimeUtils.nowSeconds();\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isAuthorityMetadataEntity(key, entity) {\n    if (!entity) {\n      return false;\n    }\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n  }\n}\nexport { AuthorityMetadataEntity };\n//# sourceMappingURL=AuthorityMetadataEntity.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}