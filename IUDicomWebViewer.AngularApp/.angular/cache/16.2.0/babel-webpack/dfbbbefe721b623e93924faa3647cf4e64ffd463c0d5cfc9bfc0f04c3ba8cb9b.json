{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AsyncMemoryStorage } from './AsyncMemoryStorage.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst CryptoKeyStoreNames = {\n  asymmetricKeys: \"asymmetricKeys\",\n  symmetricKeys: \"symmetricKeys\"\n};\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nclass CryptoKeyStore {\n  constructor(logger) {\n    this.logger = logger;\n    this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);\n    this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);\n  }\n  clear() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Delete in-memory keystores\n      _this.asymmetricKeys.clearInMemory();\n      _this.symmetricKeys.clearInMemory();\n      /**\n       * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\n       * every persistent keystore\n       */\n      try {\n        yield _this.asymmetricKeys.clearPersistent();\n        return true;\n      } catch (e) {\n        if (e instanceof Error) {\n          _this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n        } else {\n          _this.logger.error(\"Clearing keystore failed with unknown error\");\n        }\n        return false;\n      }\n    })();\n  }\n}\nexport { CryptoKeyStore, CryptoKeyStoreNames };\n//# sourceMappingURL=CryptoKeyStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}