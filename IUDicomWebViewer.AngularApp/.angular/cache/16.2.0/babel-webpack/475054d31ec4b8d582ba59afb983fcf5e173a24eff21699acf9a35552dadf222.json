{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n  const userAgent = getUserAgentValue(options.userAgentPrefix);\n  const tracingClient = tryCreateTracingClient();\n  return {\n    name: tracingPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n        if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n          return next(request);\n        }\n        const {\n          span,\n          tracingContext\n        } = (_b = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b !== void 0 ? _b : {};\n        if (!span || !tracingContext) {\n          return next(request);\n        }\n        try {\n          const response = yield tracingClient.withContext(tracingContext, next, request);\n          tryProcessResponse(span, response);\n          return response;\n        } catch (err) {\n          tryProcessError(span, err);\n          throw err;\n        }\n      })();\n    }\n  };\n}\nfunction tryCreateTracingClient() {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION\n    });\n  } catch (e) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryCreateSpan(tracingClient, request, userAgent) {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(`HTTP ${request.method}`, {\n      tracingOptions: request.tracingOptions\n    }, {\n      spanKind: \"client\",\n      spanAttributes: {\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId\n      }\n    });\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n    if (userAgent) {\n      span.setAttribute(\"http.user_agent\", userAgent);\n    }\n    // set headers\n    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return {\n      span,\n      tracingContext: updatedOptions.tracingOptions.tracingContext\n    };\n  } catch (e) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryProcessError(span, error) {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\nfunction tryProcessResponse(span, response) {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\"\n    });\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n//# sourceMappingURL=tracingPolicy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}