{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  sendGetRequestAsync() {\n    return _asyncToGenerator(function* () {\n      throw createClientAuthError(methodNotImplemented);\n    })();\n  },\n  sendPostRequestAsync() {\n    return _asyncToGenerator(function* () {\n      throw createClientAuthError(methodNotImplemented);\n    })();\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    ...authOptions\n  };\n}\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };\n//# sourceMappingURL=ClientConfiguration.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}