{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const blobSASPermissions = new BlobSASPermissions();\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  toString() {\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}