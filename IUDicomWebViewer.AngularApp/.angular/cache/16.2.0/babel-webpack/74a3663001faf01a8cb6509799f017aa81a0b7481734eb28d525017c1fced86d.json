{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { UrlUtils } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { extractBrowserRequestState } from '../utils/BrowserProtocolUtils.mjs';\nimport { hashEmptyError, hashDoesNotContainKnownProperties, noStateInHash, unableToParseState, stateInteractionTypeMismatch } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction deserializeResponse(responseString, responseLocation, logger) {\n  // Deserialize hash fragment response parameters.\n  const serverParams = UrlUtils.getDeserializedResponse(responseString);\n  if (!serverParams) {\n    if (!UrlUtils.stripLeadingHashOrQuery(responseString)) {\n      // Hash or Query string is empty\n      logger.error(`The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`);\n      throw createBrowserAuthError(hashEmptyError);\n    } else {\n      logger.error(`A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`);\n      logger.errorPii(`The ${responseLocation} detected is: ${responseString}`);\n      throw createBrowserAuthError(hashDoesNotContainKnownProperties);\n    }\n  }\n  return serverParams;\n}\n/**\n * Returns the interaction type that the response object belongs to\n */\nfunction validateInteractionType(response, browserCrypto, interactionType) {\n  if (!response.state) {\n    throw createBrowserAuthError(noStateInHash);\n  }\n  const platformStateObj = extractBrowserRequestState(browserCrypto, response.state);\n  if (!platformStateObj) {\n    throw createBrowserAuthError(unableToParseState);\n  }\n  if (platformStateObj.interactionType !== interactionType) {\n    throw createBrowserAuthError(stateInteractionTypeMismatch);\n  }\n}\nexport { deserializeResponse, validateInteractionType };\n//# sourceMappingURL=ResponseHandler.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}