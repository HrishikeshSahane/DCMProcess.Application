{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEvents = {\n  /**\n   * acquireTokenByCode API (msal-browser and msal-node).\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\n   * Used to renew an access token using a refresh token against the token endpoint.\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\n   * acquireTokenSilent API (msal-browser and msal-node).\n   * Used to silently acquire a new access token (from the cache or the network).\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\n   * acquireTokenSilentAsync (msal-browser).\n   * Internal API for acquireTokenSilent.\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\n   * acquireTokenPopup (msal-browser).\n   * Used to acquire a new access token interactively through pop ups\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\n   * signJwt API in CryptoOpts class (msal-browser).\n   * Used to signed a pop token.\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\n   * acquireToken API in the SilentCacheClient class (msal-browser).\n   * Used to read access tokens from the cache.\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\n   * acquireToken API in the SilentIframeClient class (msal-browser).\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  /**\n   * acquireToken API in SilentRereshClient (msal-browser).\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\n   * ssoSilent API (msal-browser).\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n   * Used to load authority metadata for a request.\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\n   * acquireToken APIs in msal-browser.\n   * Used to make an /authorize endpoint call with native brokering enabled.\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\n   * acquireToken API in NativeInteractionClient class (msal-browser).\n   * Used to acquire a token from Native component when native brokering is enabled.\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\n   * Time spent creating default headers for requests to token endpoint\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\n   * Time spent sending/waiting for the response of a request to the token endpoint\n   */\n  RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n  AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n  /**\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\n   * Time taken for token acquisition by broker\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\n   * Time spent on the network for refresh token acquisition\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\n   * Time taken for acquiring refresh token , records RT size\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\n   * Time taken for acquiring cached refresh token\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\n   * acquireTokenFromCache (msal-browser).\n   * Internal API for acquiring token from cache\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n  SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n  /**\n   * acquireTokenBySilentIframe (msal-browser).\n   * Internal API for acquiring token by silent Iframe\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  /**\n   * Helper function in SilentIframeClient class (msal-browser).\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\n   * SilentHandler\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n  /**\n   * Helper functions in StandardInteractionClient class (msal-browser)\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n  /**\n   * getAuthCodeUrl API (msal-browser and msal-node).\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  /**\n   * Functions from InteractionHandler (msal-browser)\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponse: \"handleCodeResponse\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\n   * APIs in Authorization Code Client (msal-common)\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  AuthClientCreateQueryString: \"authClientCreateQueryString\",\n  /**\n   * Generate functions in PopTokenGenerator (msal-common)\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  DeserializeResponse: \"deserializeResponse\",\n  /**\n   * Authority functions\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\n   * Region Discovery functions\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  RemoveHiddenIframe: \"removeHiddenIframe\",\n  /**\n   * Cache operations\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n  CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n  /**\n   * Crypto Operations\n   */\n  GeneratePkceCodes: \"generatePkceCodes\",\n  GenerateCodeVerifier: \"generateCodeVerifier\",\n  GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n  Sha256Digest: \"sha256Digest\",\n  GetRandomValues: \"getRandomValues\"\n};\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\", \"multiMatchedAT\", \"multiMatchedID\", \"multiMatchedRT\"]);\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };\n//# sourceMappingURL=PerformanceEvent.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}