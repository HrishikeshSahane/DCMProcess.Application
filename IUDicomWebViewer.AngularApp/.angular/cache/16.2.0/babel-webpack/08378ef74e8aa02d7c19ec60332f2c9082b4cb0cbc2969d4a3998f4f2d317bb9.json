{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\n/**\n * Returns URL Safe b64 encoded string from a plaintext string.\n * @param input\n */\nfunction urlEncode(input) {\n  return encodeURIComponent(base64Encode(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n}\n/**\n * Returns URL Safe b64 encoded string from an int8Array.\n * @param inputArr\n */\nfunction urlEncodeArr(inputArr) {\n  return base64EncArr(inputArr).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\n * Returns b64 encoded string from plaintext string.\n * @param input\n */\nfunction base64Encode(input) {\n  return base64EncArr(new TextEncoder().encode(input));\n}\n/**\n * Base64 encode byte array\n * @param aBytes\n */\nfunction base64EncArr(aBytes) {\n  const binString = Array.from(aBytes, x => String.fromCodePoint(x)).join(\"\");\n  return btoa(binString);\n}\nexport { base64Encode, urlEncode, urlEncodeArr };\n//# sourceMappingURL=Base64Encode.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}