{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, PerformanceEvents, TimeUtils } from '@azure/msal-common';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthController {\n  constructor(operatingContext) {\n    this.operatingContext = operatingContext;\n    const proxy = this.operatingContext.getBridgeProxy();\n    if (proxy !== undefined) {\n      this.bridgeProxy = proxy;\n    } else {\n      throw new Error(\"unexpected: bridgeProxy is undefined\");\n    }\n    // Set the configuration.\n    this.config = operatingContext.getConfig();\n    // Initialize logger\n    this.logger = this.operatingContext.getLogger();\n    // Initialize performance client\n    this.performanceClient = this.config.telemetry.client;\n    // Initialize the crypto class.\n    this.browserCrypto = operatingContext.isBrowserEnvironment() ? new CryptoOps(this.logger, this.performanceClient) : DEFAULT_CRYPTO_IMPLEMENTATION;\n    this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n    this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n  }\n  getBrowserStorage() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  getEventHandler() {\n    return this.eventHandler;\n  }\n  static createController(operatingContext) {\n    return _asyncToGenerator(function* () {\n      const controller = new NestedAppAuthController(operatingContext);\n      return Promise.resolve(controller);\n    })();\n  }\n  initialize() {\n    // do nothing not required by this controller\n    return Promise.resolve();\n  }\n  acquireTokenInteractive(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);\n      const atPopupMeasurement = _this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, request.correlationId);\n      atPopupMeasurement?.add({\n        nestedAppAuthRequest: true\n      });\n      try {\n        const naaRequest = _this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = yield _this.bridgeProxy.getTokenInteractive(naaRequest);\n        const result = _this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n        _this.operatingContext.setActiveAccount(result.account);\n        _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n        atPopupMeasurement.add({\n          accessTokenSize: result.accessToken.length,\n          idTokenSize: result.idToken.length\n        });\n        atPopupMeasurement.end({\n          success: true,\n          requestId: result.requestId\n        });\n        return result;\n      } catch (e) {\n        const error = _this.nestedAppAuthAdapter.fromBridgeError(e);\n        _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n        atPopupMeasurement.end({\n          errorCode: error.errorCode,\n          subErrorCode: error.subError,\n          success: false\n        });\n        throw error;\n      }\n    })();\n  }\n  acquireTokenSilentInternal(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n      const ssoSilentMeasurement = _this2.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, request.correlationId);\n      ssoSilentMeasurement?.increment({\n        visibilityChangeCount: 0\n      });\n      ssoSilentMeasurement?.add({\n        nestedAppAuthRequest: true\n      });\n      try {\n        const naaRequest = _this2.nestedAppAuthAdapter.toNaaTokenRequest(request);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = yield _this2.bridgeProxy.getTokenSilent(naaRequest);\n        const result = _this2.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n        _this2.operatingContext.setActiveAccount(result.account);\n        _this2.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n        ssoSilentMeasurement?.add({\n          accessTokenSize: result.accessToken.length,\n          idTokenSize: result.idToken.length\n        });\n        ssoSilentMeasurement?.end({\n          success: true,\n          requestId: result.requestId\n        });\n        return result;\n      } catch (e) {\n        const error = _this2.nestedAppAuthAdapter.fromBridgeError(e);\n        _this2.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n        ssoSilentMeasurement?.end({\n          errorCode: error.errorCode,\n          subErrorCode: error.subError,\n          success: false\n        });\n        throw error;\n      }\n    })();\n  }\n  acquireTokenPopup(request) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.acquireTokenInteractive(request);\n    })();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  acquireTokenSilent(silentRequest) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.acquireTokenSilentInternal(silentRequest);\n    })();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  acquireTokenNative(request, apiId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  acquireTokenByRefreshToken(commonRequest,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\n   * Adds event callbacks to array\n   * @param callback\n   */\n  addEventCallback(callback) {\n    return this.eventHandler.addEventCallback(callback);\n  }\n  /**\n   * Removes callback with provided id from callback array\n   * @param callbackId\n   */\n  removeEventCallback(callbackId) {\n    this.eventHandler.removeEventCallback(callbackId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addPerformanceCallback(callback) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removePerformanceCallback(callbackId) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  enableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  disableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccount(accountFilter) {\n    throw NestedAppAuthError.createUnsupportedError();\n    // TODO: Look at standard implementation\n  }\n\n  getAccountByHomeId(homeAccountId) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.homeAccountId === homeAccountId) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAccountByLocalId(localId) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.localAccountId === localId) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAccountByUsername(userName) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.username === userName) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAllAccounts() {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      return [this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount)];\n    } else {\n      return [];\n    }\n  }\n  handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    if (request !== undefined) {\n      return this.acquireTokenInteractive(request);\n    } else {\n      throw NestedAppAuthError.createUnsupportedError();\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loginRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logout(logoutRequest) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  ssoSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    return this.acquireTokenSilentInternal(request);\n  }\n  getTokenCache() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\n   * Returns the logger instance\n   */\n  getLogger() {\n    return this.logger;\n  }\n  /**\n   * Replaces the default logger set in configurations with new Logger with new configurations\n   * @param logger Logger instance\n   */\n  setLogger(logger) {\n    this.logger = logger;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setActiveAccount(account) {\n    /*\n     * StandardController uses this to allow the developer to set the active account\n     * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n     */\n    this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n    return;\n  }\n  getActiveAccount() {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n    } else {\n      return null;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initializeWrapperLibrary(sku, version) {\n    /*\n     * Standard controller uses this to set the sku and version of the wrapper library in the storage\n     * we do nothing here\n     */\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setNavigationClient(navigationClient) {\n    this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  isBrowserEnv() {\n    return this.operatingContext.isBrowserEnvironment();\n  }\n  getBrowserCrypto() {\n    return this.browserCrypto;\n  }\n  getPerformanceClient() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  getRedirectResponse() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  preflightBrowserEnvironmentCheck(interactionType,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  setInteractionInProgress // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  clearCache(logoutRequest) {\n    return _asyncToGenerator(function* () {\n      throw NestedAppAuthError.createUnsupportedError();\n    })();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hydrateCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  result,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    return _asyncToGenerator(function* () {\n      throw NestedAppAuthError.createUnsupportedError();\n    })();\n  }\n}\nexport { NestedAppAuthController };\n//# sourceMappingURL=NestedAppAuthController.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}