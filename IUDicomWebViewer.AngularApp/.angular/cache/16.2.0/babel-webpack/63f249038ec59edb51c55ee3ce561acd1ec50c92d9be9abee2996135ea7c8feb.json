{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Authority, formatAuthorityUri } from './Authority.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError } from '../error/ClientAuthErrorCodes.mjs';\nimport { urlEmptyError } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityFactory {\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n   *\n   * Also performs endpoint discovery.\n   *\n   * @param authorityUri\n   * @param networkClient\n   * @param protocolMode\n   */\n  static createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return _asyncToGenerator(function* () {\n      performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n      const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\n      // Initialize authority and perform discovery endpoint check.\n      const acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n      try {\n        yield invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n        return acquireTokenAuthority;\n      } catch (e) {\n        throw createClientAuthError(endpointResolutionError);\n      }\n    })();\n  }\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n   *\n   * Does not perform endpoint discovery.\n   *\n   * @param authorityUrl\n   * @param networkInterface\n   * @param protocolMode\n   */\n  static createInstance(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (!authorityUrl) {\n      throw createClientConfigurationError(urlEmptyError);\n    }\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  }\n}\nexport { AuthorityFactory };\n//# sourceMappingURL=AuthorityFactory.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}