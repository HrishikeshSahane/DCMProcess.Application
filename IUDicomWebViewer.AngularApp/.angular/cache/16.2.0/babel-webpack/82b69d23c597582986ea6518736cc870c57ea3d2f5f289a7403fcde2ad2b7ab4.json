{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { AuthError } from '@azure/msal-common';\nimport { pkceNotCreated, cryptoNonExistent, emptyNavigateUri, hashEmptyError, noStateInHash, hashDoesNotContainKnownProperties, unableToParseState, stateInteractionTypeMismatch, interactionInProgress, popupWindowError, emptyWindowError, userCancelled, monitorPopupTimeout, monitorWindowTimeout, redirectInIframe, blockIframeReload, blockNestedPopups, iframeClosedPrematurely, silentLogoutUnsupported, noAccountError, silentPromptValueError, noTokenRequestCacheError, unableToParseTokenRequestCacheError, noCachedAuthorityError, authRequestNotSetError, invalidCacheType, nonBrowserEnvironment, databaseNotOpen, noNetworkConnectivity, postRequestFailed, getRequestFailed, failedToParseResponse, unableToLoadToken, cryptoKeyNotFound, authCodeRequired, authCodeOrNativeAccountIdRequired, spaCodeAndNativeAccountIdPresent, databaseUnavailable, unableToAcquireTokenFromNativePlatform, nativeHandshakeTimeout, nativeExtensionNotInstalled, nativeConnectionNotEstablished, uninitializedPublicClientApplication, nativePromptNotSupported, invalidBase64String } from './BrowserAuthErrorCodes.mjs';\nimport * as BrowserAuthErrorCodes from './BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst BrowserAuthErrorMessages = {\n  [pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n  [cryptoNonExistent]: \"The crypto object or function is not available.\",\n  [emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n  [hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n  [noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n  [hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n  [unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n  [stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n  [interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n  [popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n  [emptyWindowError]: \"window.open returned null or undefined window object.\",\n  [userCancelled]: \"User cancelled the flow.\",\n  [monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n  [monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n  [redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n  [blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n  [blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n  [iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n  [silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n  [noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n  [silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n  [noTokenRequestCacheError]: \"No token request found in cache.\",\n  [unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n  [noCachedAuthorityError]: \"No cached authority found.\",\n  [authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n  [invalidCacheType]: \"Invalid cache type\",\n  [nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n  [databaseNotOpen]: \"Database is not open!\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n  [getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n  [failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n  [unableToLoadToken]: \"Error loading token to cache.\",\n  [cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n  [authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n  [authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n  [spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n  [databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n  [unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n  [nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n  [nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n  [nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n  [uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n  [nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n  [invalidBase64String]: \"Invalid base64 encoded string.\"\n};\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use exported BrowserAuthErrorCodes instead.\n * In your app you can do :\n * ```\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\n * ```\n */\nconst BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: pkceNotCreated,\n    desc: BrowserAuthErrorMessages[pkceNotCreated]\n  },\n  cryptoDoesNotExist: {\n    code: cryptoNonExistent,\n    desc: BrowserAuthErrorMessages[cryptoNonExistent]\n  },\n  emptyNavigateUriError: {\n    code: emptyNavigateUri,\n    desc: BrowserAuthErrorMessages[emptyNavigateUri]\n  },\n  hashEmptyError: {\n    code: hashEmptyError,\n    desc: BrowserAuthErrorMessages[hashEmptyError]\n  },\n  hashDoesNotContainStateError: {\n    code: noStateInHash,\n    desc: BrowserAuthErrorMessages[noStateInHash]\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: hashDoesNotContainKnownProperties,\n    desc: BrowserAuthErrorMessages[hashDoesNotContainKnownProperties]\n  },\n  unableToParseStateError: {\n    code: unableToParseState,\n    desc: BrowserAuthErrorMessages[unableToParseState]\n  },\n  stateInteractionTypeMismatchError: {\n    code: stateInteractionTypeMismatch,\n    desc: BrowserAuthErrorMessages[stateInteractionTypeMismatch]\n  },\n  interactionInProgress: {\n    code: interactionInProgress,\n    desc: BrowserAuthErrorMessages[interactionInProgress]\n  },\n  popupWindowError: {\n    code: popupWindowError,\n    desc: BrowserAuthErrorMessages[popupWindowError]\n  },\n  emptyWindowError: {\n    code: emptyWindowError,\n    desc: BrowserAuthErrorMessages[emptyWindowError]\n  },\n  userCancelledError: {\n    code: userCancelled,\n    desc: BrowserAuthErrorMessages[userCancelled]\n  },\n  monitorPopupTimeoutError: {\n    code: monitorPopupTimeout,\n    desc: BrowserAuthErrorMessages[monitorPopupTimeout]\n  },\n  monitorIframeTimeoutError: {\n    code: monitorWindowTimeout,\n    desc: BrowserAuthErrorMessages[monitorWindowTimeout]\n  },\n  redirectInIframeError: {\n    code: redirectInIframe,\n    desc: BrowserAuthErrorMessages[redirectInIframe]\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: blockIframeReload,\n    desc: BrowserAuthErrorMessages[blockIframeReload]\n  },\n  blockAcquireTokenInPopupsError: {\n    code: blockNestedPopups,\n    desc: BrowserAuthErrorMessages[blockNestedPopups]\n  },\n  iframeClosedPrematurelyError: {\n    code: iframeClosedPrematurely,\n    desc: BrowserAuthErrorMessages[iframeClosedPrematurely]\n  },\n  silentLogoutUnsupportedError: {\n    code: silentLogoutUnsupported,\n    desc: BrowserAuthErrorMessages[silentLogoutUnsupported]\n  },\n  noAccountError: {\n    code: noAccountError,\n    desc: BrowserAuthErrorMessages[noAccountError]\n  },\n  silentPromptValueError: {\n    code: silentPromptValueError,\n    desc: BrowserAuthErrorMessages[silentPromptValueError]\n  },\n  noTokenRequestCacheError: {\n    code: noTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[noTokenRequestCacheError]\n  },\n  unableToParseTokenRequestCacheError: {\n    code: unableToParseTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[unableToParseTokenRequestCacheError]\n  },\n  noCachedAuthorityError: {\n    code: noCachedAuthorityError,\n    desc: BrowserAuthErrorMessages[noCachedAuthorityError]\n  },\n  authRequestNotSet: {\n    code: authRequestNotSetError,\n    desc: BrowserAuthErrorMessages[authRequestNotSetError]\n  },\n  invalidCacheType: {\n    code: invalidCacheType,\n    desc: BrowserAuthErrorMessages[invalidCacheType]\n  },\n  notInBrowserEnvironment: {\n    code: nonBrowserEnvironment,\n    desc: BrowserAuthErrorMessages[nonBrowserEnvironment]\n  },\n  databaseNotOpen: {\n    code: databaseNotOpen,\n    desc: BrowserAuthErrorMessages[databaseNotOpen]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: BrowserAuthErrorMessages[noNetworkConnectivity]\n  },\n  postRequestFailed: {\n    code: postRequestFailed,\n    desc: BrowserAuthErrorMessages[postRequestFailed]\n  },\n  getRequestFailed: {\n    code: getRequestFailed,\n    desc: BrowserAuthErrorMessages[getRequestFailed]\n  },\n  failedToParseNetworkResponse: {\n    code: failedToParseResponse,\n    desc: BrowserAuthErrorMessages[failedToParseResponse]\n  },\n  unableToLoadTokenError: {\n    code: unableToLoadToken,\n    desc: BrowserAuthErrorMessages[unableToLoadToken]\n  },\n  signingKeyNotFoundInStorage: {\n    code: cryptoKeyNotFound,\n    desc: BrowserAuthErrorMessages[cryptoKeyNotFound]\n  },\n  authCodeRequired: {\n    code: authCodeRequired,\n    desc: BrowserAuthErrorMessages[authCodeRequired]\n  },\n  authCodeOrNativeAccountRequired: {\n    code: authCodeOrNativeAccountIdRequired,\n    desc: BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired]\n  },\n  spaCodeAndNativeAccountPresent: {\n    code: spaCodeAndNativeAccountIdPresent,\n    desc: BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent]\n  },\n  databaseUnavailable: {\n    code: databaseUnavailable,\n    desc: BrowserAuthErrorMessages[databaseUnavailable]\n  },\n  unableToAcquireTokenFromNativePlatform: {\n    code: unableToAcquireTokenFromNativePlatform,\n    desc: BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform]\n  },\n  nativeHandshakeTimeout: {\n    code: nativeHandshakeTimeout,\n    desc: BrowserAuthErrorMessages[nativeHandshakeTimeout]\n  },\n  nativeExtensionNotInstalled: {\n    code: nativeExtensionNotInstalled,\n    desc: BrowserAuthErrorMessages[nativeExtensionNotInstalled]\n  },\n  nativeConnectionNotEstablished: {\n    code: nativeConnectionNotEstablished,\n    desc: BrowserAuthErrorMessages[nativeConnectionNotEstablished]\n  },\n  uninitializedPublicClientApplication: {\n    code: uninitializedPublicClientApplication,\n    desc: BrowserAuthErrorMessages[uninitializedPublicClientApplication]\n  },\n  nativePromptNotSupported: {\n    code: nativePromptNotSupported,\n    desc: BrowserAuthErrorMessages[nativePromptNotSupported]\n  },\n  invalidBase64StringError: {\n    code: invalidBase64String,\n    desc: BrowserAuthErrorMessages[invalidBase64String]\n  }\n};\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nclass BrowserAuthError extends AuthError {\n  constructor(errorCode) {\n    super(errorCode, BrowserAuthErrorMessages[errorCode]);\n    Object.setPrototypeOf(this, BrowserAuthError.prototype);\n    this.name = \"BrowserAuthError\";\n  }\n}\nfunction createBrowserAuthError(errorCode) {\n  return new BrowserAuthError(errorCode);\n}\nexport { BrowserAuthError, BrowserAuthErrorMessage, BrowserAuthErrorMessages, createBrowserAuthError };\n//# sourceMappingURL=BrowserAuthError.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}