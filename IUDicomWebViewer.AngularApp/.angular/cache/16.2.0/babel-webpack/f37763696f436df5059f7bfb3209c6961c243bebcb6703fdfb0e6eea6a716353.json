{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Returns true if tenantId matches the utid portion of homeAccountId\n * @param tenantId\n * @param homeAccountId\n * @returns\n */\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n  return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\nfunction buildTenantProfileFromIdTokenClaims(homeAccountId, idTokenClaims) {\n  const {\n    oid,\n    sub,\n    tid,\n    name,\n    tfp,\n    acr\n  } = idTokenClaims;\n  /**\n   * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\n   * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\n   * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\n   * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\n   */\n  const tenantId = tid || tfp || acr || \"\";\n  return {\n    tenantId: tenantId,\n    localAccountId: oid || sub || \"\",\n    name: name,\n    isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n  };\n}\n/**\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\n * @param baseAccountInfo\n * @param idTokenClaims\n * @returns\n */\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims) {\n  let updatedAccountInfo = baseAccountInfo;\n  // Tenant Profile overrides passed in account info\n  if (tenantProfile) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...tenantProfileOverride\n    } = tenantProfile;\n    updatedAccountInfo = {\n      ...baseAccountInfo,\n      ...tenantProfileOverride\n    };\n  }\n  // ID token claims override passed in account info and tenant profile\n  if (idTokenClaims) {\n    // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...claimsSourcedTenantProfile\n    } = buildTenantProfileFromIdTokenClaims(baseAccountInfo.homeAccountId, idTokenClaims);\n    updatedAccountInfo = {\n      ...updatedAccountInfo,\n      ...claimsSourcedTenantProfile,\n      idTokenClaims: idTokenClaims\n    };\n    return updatedAccountInfo;\n  }\n  return updatedAccountInfo;\n}\nexport { buildTenantProfileFromIdTokenClaims, tenantIdMatchesHomeTenant, updateAccountTenantProfileData };\n//# sourceMappingURL=AccountInfo.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}