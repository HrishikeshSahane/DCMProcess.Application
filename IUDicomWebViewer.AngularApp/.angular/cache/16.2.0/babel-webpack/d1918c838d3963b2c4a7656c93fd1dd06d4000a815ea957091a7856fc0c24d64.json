{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { GenericPollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { Poller } from \"../poller\";\nimport { deserializeState } from \"../../poller/operation\";\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine extends Poller {\n  constructor(lro, options) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState\n    } = options || {};\n    const state = resumeFrom ? deserializeState(resumeFrom) : {};\n    const operation = new GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n    this.config = {\n      intervalInMs: intervalInMs\n    };\n    operation.setPollerConfig(this.config);\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay() {\n    return new Promise(resolve => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}\n//# sourceMappingURL=lroEngine.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}