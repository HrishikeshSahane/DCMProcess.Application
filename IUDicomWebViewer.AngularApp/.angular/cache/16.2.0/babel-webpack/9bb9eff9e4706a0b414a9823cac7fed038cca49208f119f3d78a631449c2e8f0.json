{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nclass BaseOperatingContext {\n  constructor(config) {\n    /*\n     * If loaded in an environment where window is not available,\n     * set internal flag to false so that further requests fail.\n     * This is to support server-side rendering environments.\n     */\n    this.browserEnvironment = typeof window !== \"undefined\";\n    this.config = buildConfiguration(config, this.browserEnvironment);\n    this.logger = new Logger(this.config.system.loggerOptions, name, version);\n    this.available = false;\n  }\n  /**\n   * Return the MSAL config\n   * @returns BrowserConfiguration\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Returns the MSAL Logger\n   * @returns Logger\n   */\n  getLogger() {\n    return this.logger;\n  }\n  isAvailable() {\n    return this.available;\n  }\n  isBrowserEnvironment() {\n    return this.browserEnvironment;\n  }\n}\nexport { BaseOperatingContext };\n//# sourceMappingURL=BaseOperatingContext.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}