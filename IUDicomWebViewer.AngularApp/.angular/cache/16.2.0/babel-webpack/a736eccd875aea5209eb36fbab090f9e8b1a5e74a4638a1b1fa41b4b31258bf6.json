{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PerformanceEvents, invokeAsync, Constants, UrlString, AuthorizationCodeClient, Authority, AuthorityFactory, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { generatePkceCodes } from '../crypto/PkceGenerator.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n  /**\n   * Generates an auth code request tied to the url request.\n   * @param request\n   */\n  initializeAuthorizationCodeRequest(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, _this.correlationId);\n      const generatedPkceParams = yield invokeAsync(generatePkceCodes, PerformanceEvents.GeneratePkceCodes, _this.logger, _this.performanceClient, _this.correlationId)(_this.performanceClient, _this.logger, _this.correlationId);\n      const authCodeRequest = {\n        ...request,\n        redirectUri: request.redirectUri,\n        code: Constants.EMPTY_STRING,\n        codeVerifier: generatedPkceParams.verifier\n      };\n      request.codeChallenge = generatedPkceParams.challenge;\n      request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n      return authCodeRequest;\n    })();\n  }\n  /**\n   * Initializer for the logout request.\n   * @param logoutRequest\n   */\n  initializeLogoutRequest(logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n    const validLogoutRequest = {\n      correlationId: this.correlationId || createNewGuid(),\n      ...logoutRequest\n    };\n    /**\n     * Set logout_hint to be login_hint from ID Token Claims if present\n     * and logoutHint attribute wasn't manually set in logout request\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n     * Otherwise, use passed uri, config, or current page.\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(getCurrentUri(), getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  }\n  /**\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n   * logout_hint in end session request.\n   * @param account\n   */\n  getLogoutHintFromIdTokenClaims(account) {\n    const idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  }\n  /**\n   * Creates an Authorization Code Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, _this2.correlationId);\n      // Create auth module.\n      const clientConfig = yield invokeAsync(_this2.getClientConfiguration.bind(_this2), PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this2.logger, _this2.performanceClient, _this2.correlationId)(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n      return new AuthorizationCodeClient(clientConfig, _this2.performanceClient);\n    })();\n  }\n  /**\n   * Creates a Client Configuration object with the given request authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this3.correlationId);\n      const discoveredAuthority = yield invokeAsync(_this3.getDiscoveredAuthority.bind(_this3), PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, _this3.logger, _this3.performanceClient, _this3.correlationId)(requestAuthority, requestAzureCloudOptions);\n      const logger = _this3.config.system.loggerOptions;\n      return {\n        authOptions: {\n          clientId: _this3.config.auth.clientId,\n          authority: discoveredAuthority,\n          clientCapabilities: _this3.config.auth.clientCapabilities\n        },\n        systemOptions: {\n          tokenRenewalOffsetSeconds: _this3.config.system.tokenRenewalOffsetSeconds,\n          preventCorsPreflight: true\n        },\n        loggerOptions: {\n          loggerCallback: logger.loggerCallback,\n          piiLoggingEnabled: logger.piiLoggingEnabled,\n          logLevel: logger.logLevel,\n          correlationId: _this3.correlationId\n        },\n        cacheOptions: {\n          claimsBasedCachingEnabled: _this3.config.cache.claimsBasedCachingEnabled\n        },\n        cryptoInterface: _this3.browserCrypto,\n        networkInterface: _this3.networkClient,\n        storageInterface: _this3.browserStorage,\n        serverTelemetryManager: serverTelemetryManager,\n        libraryInfo: {\n          sku: BrowserConstants.MSAL_SKU,\n          version: version,\n          cpu: Constants.EMPTY_STRING,\n          os: Constants.EMPTY_STRING\n        },\n        telemetry: _this3.config.telemetry\n      };\n    })();\n  }\n  /**\n   * Used to get a discovered version of the default authority.\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, _this4.correlationId);\n      const authorityOptions = {\n        protocolMode: _this4.config.auth.protocolMode,\n        OIDCOptions: _this4.config.auth.OIDCOptions,\n        knownAuthorities: _this4.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: _this4.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: _this4.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: _this4.config.auth.skipAuthorityMetadataCache\n      };\n      // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n      const userAuthority = requestAuthority ? requestAuthority : _this4.config.auth.authority;\n      // fall back to the authority from config\n      const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || _this4.config.auth.azureCloudOptions);\n      return invokeAsync(AuthorityFactory.createDiscoveredInstance.bind(AuthorityFactory), PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, _this4.logger, _this4.performanceClient, _this4.correlationId)(builtAuthority, _this4.config.system.networkClient, _this4.browserStorage, authorityOptions, _this4.logger, _this4.performanceClient, _this4.correlationId);\n    })();\n  }\n  /**\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n   * @param request\n   * @param interactionType\n   */\n  initializeAuthorizationRequest(request, interactionType) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, _this5.correlationId);\n      const redirectUri = _this5.getRedirectUri(request.redirectUri);\n      const browserState = {\n        interactionType: interactionType\n      };\n      const state = ProtocolUtils.setRequestState(_this5.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n      const baseRequest = yield invokeAsync(_this5.initializeBaseRequest.bind(_this5), PerformanceEvents.InitializeBaseRequest, _this5.logger, _this5.performanceClient, _this5.correlationId)(request);\n      const validatedRequest = {\n        ...baseRequest,\n        redirectUri: redirectUri,\n        state: state,\n        nonce: request.nonce || createNewGuid(),\n        responseMode: _this5.config.auth.OIDCOptions.serverResponseType\n      };\n      const account = request.account || _this5.browserStorage.getActiveAccount();\n      if (account) {\n        _this5.logger.verbose(\"Setting validated request account\", _this5.correlationId);\n        _this5.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, _this5.correlationId);\n        validatedRequest.account = account;\n      }\n      // Check for ADAL/MSAL v1 SSO\n      if (!validatedRequest.loginHint && !account) {\n        const legacyLoginHint = _this5.browserStorage.getLegacyLoginHint();\n        if (legacyLoginHint) {\n          validatedRequest.loginHint = legacyLoginHint;\n        }\n      }\n      return validatedRequest;\n    })();\n  }\n}\nexport { StandardInteractionClient };\n//# sourceMappingURL=StandardInteractionClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}