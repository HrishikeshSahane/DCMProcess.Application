{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { createInteractionRequiredAuthError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync, invoke } from '../utils/FunctionWrappers.mjs';\nimport { tokenRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { noAccountInSilentRequest } from '../error/ClientAuthErrorCodes.mjs';\nimport { noTokensFound } from '../error/InteractionRequiredAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nclass RefreshTokenClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  acquireToken(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n      const reqTimestamp = TimeUtils.nowSeconds();\n      const response = yield invokeAsync(_this.executeTokenRequest.bind(_this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, _this.logger, _this.performanceClient, request.correlationId)(request, _this.authority);\n      // Retrieve requestId from response headers\n      const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n      const responseHandler = new ResponseHandler(_this.config.authOptions.clientId, _this.cacheManager, _this.cryptoUtils, _this.logger, _this.config.serializableCache, _this.config.persistencePlugin);\n      responseHandler.validateTokenResponse(response.body);\n      return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, _this.logger, _this.performanceClient, request.correlationId)(response.body, _this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n    })();\n  }\n  /**\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\n   * @param request\n   */\n  acquireTokenByRefreshToken(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Cannot renew token if no request object is given.\n      if (!request) {\n        throw createClientConfigurationError(tokenRequestEmpty);\n      }\n      _this2.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n      // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n      if (!request.account) {\n        throw createClientAuthError(noAccountInSilentRequest);\n      }\n      // try checking if FOCI is enabled for the given application\n      const isFOCI = _this2.cacheManager.isAppMetadataFOCI(request.account.environment);\n      // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n      if (isFOCI) {\n        try {\n          return yield invokeAsync(_this2.acquireTokenWithCachedRefreshToken.bind(_this2), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, _this2.logger, _this2.performanceClient, request.correlationId)(request, true);\n        } catch (e) {\n          const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === noTokensFound;\n          const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n          // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n          if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n            return invokeAsync(_this2.acquireTokenWithCachedRefreshToken.bind(_this2), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, _this2.logger, _this2.performanceClient, request.correlationId)(request, false);\n            // throw in all other cases\n          } else {\n            throw e;\n          }\n        }\n      }\n      // fall back to application refresh token acquisition\n      return invokeAsync(_this2.acquireTokenWithCachedRefreshToken.bind(_this2), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, _this2.logger, _this2.performanceClient, request.correlationId)(request, false);\n    })();\n  }\n  /**\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n   * @param request\n   */\n  acquireTokenWithCachedRefreshToken(request, foci) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n      // fetches family RT or application RT based on FOCI value\n      const refreshToken = invoke(_this3.cacheManager.getRefreshToken.bind(_this3.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, _this3.logger, _this3.performanceClient, request.correlationId)(request.account, foci, undefined, _this3.performanceClient, request.correlationId);\n      if (!refreshToken) {\n        throw createInteractionRequiredAuthError(noTokensFound);\n      }\n      // attach cached RT size to the current measurement\n      const refreshTokenRequest = {\n        ...request,\n        refreshToken: refreshToken.secret,\n        authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n        ccsCredential: {\n          credential: request.account.homeAccountId,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        }\n      };\n      return invokeAsync(_this3.acquireToken.bind(_this3), PerformanceEvents.RefreshTokenClientAcquireToken, _this3.logger, _this3.performanceClient, request.correlationId)(refreshTokenRequest);\n    })();\n  }\n  /**\n   * Constructs the network message and makes a NW call to the underlying secure token service\n   * @param request\n   * @param authority\n   */\n  executeTokenRequest(request, authority) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n      const queryParametersString = _this4.createTokenQueryParameters(request);\n      const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n      const requestBody = yield invokeAsync(_this4.createTokenRequestBody.bind(_this4), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, _this4.logger, _this4.performanceClient, request.correlationId)(request);\n      const headers = _this4.createTokenRequestHeaders(request.ccsCredential);\n      const thumbprint = {\n        clientId: request.tokenBodyParameters?.clientId || _this4.config.authOptions.clientId,\n        authority: authority.canonicalAuthority,\n        scopes: request.scopes,\n        claims: request.claims,\n        authenticationScheme: request.authenticationScheme,\n        resourceRequestMethod: request.resourceRequestMethod,\n        resourceRequestUri: request.resourceRequestUri,\n        shrClaims: request.shrClaims,\n        sshKid: request.sshKid\n      };\n      return invokeAsync(_this4.executePostToTokenEndpoint.bind(_this4), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, _this4.logger, _this4.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n    })();\n  }\n  /**\n   * Helper function to create the token request body\n   * @param request\n   */\n  createTokenRequestBody(request) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n      const correlationId = request.correlationId;\n      const parameterBuilder = new RequestParameterBuilder();\n      parameterBuilder.addClientId(request.tokenBodyParameters?.[CLIENT_ID] || _this5.config.authOptions.clientId);\n      if (request.redirectUri) {\n        parameterBuilder.addRedirectUri(request.redirectUri);\n      }\n      parameterBuilder.addScopes(request.scopes, true, _this5.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n      parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n      parameterBuilder.addClientInfo();\n      parameterBuilder.addLibraryInfo(_this5.config.libraryInfo);\n      parameterBuilder.addApplicationTelemetry(_this5.config.telemetry.application);\n      parameterBuilder.addThrottling();\n      if (_this5.serverTelemetryManager && !isOidcProtocolMode(_this5.config)) {\n        parameterBuilder.addServerTelemetry(_this5.serverTelemetryManager);\n      }\n      parameterBuilder.addCorrelationId(correlationId);\n      parameterBuilder.addRefreshToken(request.refreshToken);\n      if (_this5.config.clientCredentials.clientSecret) {\n        parameterBuilder.addClientSecret(_this5.config.clientCredentials.clientSecret);\n      }\n      if (_this5.config.clientCredentials.clientAssertion) {\n        const clientAssertion = _this5.config.clientCredentials.clientAssertion;\n        parameterBuilder.addClientAssertion(clientAssertion.assertion);\n        parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n      }\n      if (request.authenticationScheme === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(_this5.cryptoUtils, _this5.performanceClient);\n        const reqCnfData = yield invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, _this5.logger, _this5.performanceClient, request.correlationId)(request, _this5.logger);\n        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n      } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n        if (request.sshJwk) {\n          parameterBuilder.addSshJwk(request.sshJwk);\n        } else {\n          throw createClientConfigurationError(missingSshJwk);\n        }\n      }\n      if (!StringUtils.isEmptyObj(request.claims) || _this5.config.authOptions.clientCapabilities && _this5.config.authOptions.clientCapabilities.length > 0) {\n        parameterBuilder.addClaims(request.claims, _this5.config.authOptions.clientCapabilities);\n      }\n      if (_this5.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n        switch (request.ccsCredential.type) {\n          case CcsCredentialType.HOME_ACCOUNT_ID:\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this5.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n            }\n            break;\n          case CcsCredentialType.UPN:\n            parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n            break;\n        }\n      }\n      if (request.tokenBodyParameters) {\n        parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n      }\n      return parameterBuilder.createQueryString();\n    })();\n  }\n}\nexport { RefreshTokenClient };\n//# sourceMappingURL=RefreshTokenClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}