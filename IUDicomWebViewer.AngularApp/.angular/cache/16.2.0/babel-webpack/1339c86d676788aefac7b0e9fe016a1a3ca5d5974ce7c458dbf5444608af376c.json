{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\nimport { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postRequestFailed } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nclass FetchClient {\n  /**\n   * Fetch Client for REST endpoints - Get request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  sendGetRequestAsync(url, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let response;\n      try {\n        response = yield fetch(url, {\n          method: HTTP_REQUEST_TYPE.GET,\n          headers: _this.getFetchHeaders(options)\n        });\n      } catch (e) {\n        if (window.navigator.onLine) {\n          throw createBrowserAuthError(getRequestFailed);\n        } else {\n          throw createBrowserAuthError(noNetworkConnectivity);\n        }\n      }\n      try {\n        return {\n          headers: _this.getHeaderDict(response.headers),\n          body: yield response.json(),\n          status: response.status\n        };\n      } catch (e) {\n        throw createBrowserAuthError(failedToParseResponse);\n      }\n    })();\n  }\n  /**\n   * Fetch Client for REST endpoints - Post request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  sendPostRequestAsync(url, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const reqBody = options && options.body || Constants.EMPTY_STRING;\n      let response;\n      try {\n        response = yield fetch(url, {\n          method: HTTP_REQUEST_TYPE.POST,\n          headers: _this2.getFetchHeaders(options),\n          body: reqBody\n        });\n      } catch (e) {\n        if (window.navigator.onLine) {\n          throw createBrowserAuthError(postRequestFailed);\n        } else {\n          throw createBrowserAuthError(noNetworkConnectivity);\n        }\n      }\n      try {\n        return {\n          headers: _this2.getHeaderDict(response.headers),\n          body: yield response.json(),\n          status: response.status\n        };\n      } catch (e) {\n        throw createBrowserAuthError(failedToParseResponse);\n      }\n    })();\n  }\n  /**\n   * Get Fetch API Headers object from string map\n   * @param inputHeaders\n   */\n  getFetchHeaders(options) {\n    const headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    const optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(key => {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  }\n  getHeaderDict(headers) {\n    const headerDict = {};\n    headers.forEach((value, key) => {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  }\n}\nexport { FetchClient };\n//# sourceMappingURL=FetchClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}