{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { PerformanceEvents } from '@azure/msal-common';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\nconst keygenAlgorithmOptions = {\n  name: PKCS1_V15_KEYGEN_ALG,\n  hash: S256_HASH_ALG,\n  modulusLength: MODULUS_LENGTH,\n  publicExponent: PUBLIC_EXPONENT\n};\n/**\n * Check whether browser crypto is available.\n */\nfunction validateCryptoAvailable(logger) {\n  if (\"crypto\" in window) {\n    logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n  } else {\n    logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n    throw createBrowserAuthError(cryptoNonExistent);\n  }\n}\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString\n */\nfunction sha256Digest(_x, _x2, _x3) {\n  return _sha256Digest.apply(this, arguments);\n}\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nfunction _sha256Digest() {\n  _sha256Digest = _asyncToGenerator(function* (dataString, performanceClient, correlationId) {\n    performanceClient?.addQueueMeasurement(PerformanceEvents.Sha256Digest, correlationId);\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(S256_HASH_ALG, data);\n  });\n  return _sha256Digest.apply(this, arguments);\n}\nfunction getRandomValues(dataBuffer) {\n  return window.crypto.getRandomValues(dataBuffer);\n}\n/**\n * Creates a new random GUID\n * @returns\n */\nfunction createNewGuid() {\n  return window.crypto.randomUUID();\n}\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nfunction generateKeyPair(_x4, _x5) {\n  return _generateKeyPair.apply(this, arguments);\n}\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator(function* (extractable, usages) {\n    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n  });\n  return _generateKeyPair.apply(this, arguments);\n}\nfunction exportJwk(_x6) {\n  return _exportJwk.apply(this, arguments);\n}\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nfunction _exportJwk() {\n  _exportJwk = _asyncToGenerator(function* (key) {\n    return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n  });\n  return _exportJwk.apply(this, arguments);\n}\nfunction importJwk(_x7, _x8, _x9) {\n  return _importJwk.apply(this, arguments);\n}\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nfunction _importJwk() {\n  _importJwk = _asyncToGenerator(function* (key, extractable, usages) {\n    return window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n  });\n  return _importJwk.apply(this, arguments);\n}\nfunction sign(_x10, _x11) {\n  return _sign.apply(this, arguments);\n}\nfunction _sign() {\n  _sign = _asyncToGenerator(function* (key, data) {\n    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n  });\n  return _sign.apply(this, arguments);\n}\nexport { createNewGuid, exportJwk, generateKeyPair, getRandomValues, importJwk, sha256Digest, sign, validateCryptoAvailable };\n//# sourceMappingURL=BrowserCrypto.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}