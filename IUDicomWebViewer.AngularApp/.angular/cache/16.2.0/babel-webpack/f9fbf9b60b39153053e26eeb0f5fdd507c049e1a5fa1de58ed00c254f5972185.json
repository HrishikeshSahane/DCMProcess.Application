{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { stubbedPublicClientApplicationCalled } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst stubbedPublicClientApplication = {\n  initialize: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  acquireTokenPopup: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  acquireTokenRedirect: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  acquireTokenSilent: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  acquireTokenByCode: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  getAllAccounts: () => {\n    return [];\n  },\n  getAccountByHomeId: () => {\n    return null;\n  },\n  getAccountByUsername: () => {\n    return null;\n  },\n  getAccountByLocalId: () => {\n    return null;\n  },\n  handleRedirectPromise: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  loginPopup: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  loginRedirect: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  logout: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  logoutRedirect: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  logoutPopup: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  ssoSilent: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  addEventCallback: () => {\n    return null;\n  },\n  removeEventCallback: () => {\n    return;\n  },\n  addPerformanceCallback: () => {\n    return \"\";\n  },\n  removePerformanceCallback: () => {\n    return false;\n  },\n  enableAccountStorageEvents: () => {\n    return;\n  },\n  disableAccountStorageEvents: () => {\n    return;\n  },\n  getTokenCache: () => {\n    throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled);\n  },\n  getLogger: () => {\n    throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled);\n  },\n  setLogger: () => {\n    return;\n  },\n  setActiveAccount: () => {\n    return;\n  },\n  getActiveAccount: () => {\n    return null;\n  },\n  initializeWrapperLibrary: () => {\n    return;\n  },\n  setNavigationClient: () => {\n    return;\n  },\n  getConfiguration: () => {\n    throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled);\n  },\n  hydrateCache: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  },\n  clearCache: () => {\n    return Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled));\n  }\n};\nexport { stubbedPublicClientApplication };\n//# sourceMappingURL=IPublicClientApplication.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}