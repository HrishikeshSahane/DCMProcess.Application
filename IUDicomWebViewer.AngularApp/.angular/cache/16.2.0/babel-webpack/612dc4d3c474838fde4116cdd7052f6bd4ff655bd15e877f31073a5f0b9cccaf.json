{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { invokeAsync, PerformanceEvents, AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { authCodeRequired, silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentAuthCodeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n  }\n  /**\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\n   * @param request\n   */\n  acquireToken(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Auth code payload is required\n      if (!request.code) {\n        throw createBrowserAuthError(authCodeRequired);\n      }\n      // Create silent request\n      const silentRequest = yield invokeAsync(_this.initializeAuthorizationRequest.bind(_this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, _this.logger, _this.performanceClient, request.correlationId)(request, InteractionType.Silent);\n      const serverTelemetryManager = _this.initializeServerTelemetryManager(_this.apiId);\n      try {\n        // Create auth code request (PKCE not needed)\n        const authCodeRequest = {\n          ...silentRequest,\n          code: request.code\n        };\n        // Initialize the client\n        const clientConfig = yield invokeAsync(_this.getClientConfiguration.bind(_this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this.logger, _this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority);\n        const authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n        _this.logger.verbose(\"Auth code client created\");\n        // Create silent handler\n        const interactionHandler = new InteractionHandler(authClient, _this.browserStorage, authCodeRequest, _this.logger, _this.performanceClient);\n        // Handle auth code parameters from request\n        return yield invokeAsync(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), PerformanceEvents.HandleCodeResponseFromServer, _this.logger, _this.performanceClient, request.correlationId)({\n          code: request.code,\n          msgraph_host: request.msGraphHost,\n          cloud_graph_host_name: request.cloudGraphHostName,\n          cloud_instance_host_name: request.cloudInstanceHostName\n        }, silentRequest, false);\n      } catch (e) {\n        if (e instanceof AuthError) {\n          e.setCorrelationId(_this.correlationId);\n          serverTelemetryManager.cacheFailedRequest(e);\n        }\n        throw e;\n      }\n    })();\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n}\nexport { SilentAuthCodeClient };\n//# sourceMappingURL=SilentAuthCodeClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}