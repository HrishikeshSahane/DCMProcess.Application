{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nclass StringUtils {\n  /**\n   * Check if stringified object is empty\n   * @param strObj\n   */\n  static isEmptyObj(strObj) {\n    if (strObj) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\n   * Parses string into an object.\n   *\n   * @param query\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\n   * Trims entries in an array.\n   *\n   * @param arr\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\n   * Removes empty strings from array\n   * @param arr\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !!entry;\n    });\n  }\n  /**\n   * Attempts to parse a string into JSON\n   * @param str\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n   * @param input String to match against\n   */\n  static matchPattern(pattern, input) {\n    /**\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };\n//# sourceMappingURL=StringUtils.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}