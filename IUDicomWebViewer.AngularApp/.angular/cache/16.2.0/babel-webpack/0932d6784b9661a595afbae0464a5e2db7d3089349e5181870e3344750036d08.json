{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isBlob, isWebReadableStream } from \"./typeGuards\";\nexport function toStream(source) {\n  if (source instanceof Uint8Array) {\n    return new Blob([source]).stream();\n  } else if (isWebReadableStream(source)) {\n    return source;\n  } else if (isBlob(source)) {\n    return source.stream();\n  } else {\n    throw new Error(\"Unsupported type. Only ReadableStream, Uint8Array and Blob are supported in browser\");\n  }\n}\nexport function toWebStream(stream) {\n  if (isWebReadableStream(stream)) {\n    return stream;\n  } else {\n    throw new Error(\"Did not expect a Node stream in browser environment\");\n  }\n}\nexport function concatenateStreams(streams) {\n  var _a;\n  const remainingStreams = Array.from(streams);\n  let reader = (_a = remainingStreams.shift()) === null || _a === void 0 ? void 0 : _a.getReader();\n  function doPull(_x) {\n    return _doPull.apply(this, arguments);\n  }\n  function _doPull() {\n    _doPull = _asyncToGenerator(function* (controller) {\n      var _a;\n      if (!reader) {\n        controller.close();\n        return;\n      }\n      let value;\n      let done;\n      try {\n        ({\n          value,\n          done\n        } = yield reader.read());\n      } catch (e) {\n        controller.error(e);\n        reader.releaseLock();\n        return;\n      }\n      if (done) {\n        reader.releaseLock();\n        reader = (_a = remainingStreams.shift()) === null || _a === void 0 ? void 0 : _a.getReader();\n        yield doPull(controller);\n      } else {\n        controller.enqueue(value);\n      }\n    });\n    return _doPull.apply(this, arguments);\n  }\n  return new ReadableStream({\n    pull(controller) {\n      return doPull(controller);\n    },\n    cancel(reason) {\n      reader === null || reader === void 0 ? void 0 : reader.cancel(reason);\n    }\n  });\n}\n//# sourceMappingURL=stream.browser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}