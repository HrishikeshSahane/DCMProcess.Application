{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PerformanceEvents, invoke, invokeAsync } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { getRandomValues, sha256Digest } from './BrowserCrypto.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\n * This file defines APIs to generate PKCE codes and code verifiers.\n */\n/**\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n */\nfunction generatePkceCodes(_x, _x2, _x3) {\n  return _generatePkceCodes.apply(this, arguments);\n}\n/**\n * Generates a random 32 byte buffer and returns the base64\n * encoded string to be used as a PKCE Code Verifier\n */\nfunction _generatePkceCodes() {\n  _generatePkceCodes = _asyncToGenerator(function* (performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(PerformanceEvents.GeneratePkceCodes, correlationId);\n    const codeVerifier = invoke(generateCodeVerifier, PerformanceEvents.GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);\n    const codeChallenge = yield invokeAsync(generateCodeChallengeFromVerifier, PerformanceEvents.GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);\n    return {\n      verifier: codeVerifier,\n      challenge: codeChallenge\n    };\n  });\n  return _generatePkceCodes.apply(this, arguments);\n}\nfunction generateCodeVerifier(performanceClient, logger, correlationId) {\n  try {\n    // Generate random values as utf-8\n    const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n    invoke(getRandomValues, PerformanceEvents.GetRandomValues, logger, performanceClient, correlationId)(buffer);\n    // encode verifier as base64\n    const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n    return pkceCodeVerifierB64;\n  } catch (e) {\n    throw createBrowserAuthError(pkceNotCreated);\n  }\n}\n/**\n * Creates a base64 encoded PKCE Code Challenge string from the\n * hash created from the PKCE Code Verifier supplied\n */\nfunction generateCodeChallengeFromVerifier(_x4, _x5, _x6, _x7) {\n  return _generateCodeChallengeFromVerifier.apply(this, arguments);\n}\nfunction _generateCodeChallengeFromVerifier() {\n  _generateCodeChallengeFromVerifier = _asyncToGenerator(function* (pkceCodeVerifier, performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(PerformanceEvents.GenerateCodeChallengeFromVerifier, correlationId);\n    try {\n      // hashed verifier\n      const pkceHashedCodeVerifier = yield invokeAsync(sha256Digest, PerformanceEvents.Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);\n      // encode hash as base64\n      return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n      throw createBrowserAuthError(pkceNotCreated);\n    }\n  });\n  return _generateCodeChallengeFromVerifier.apply(this, arguments);\n}\nexport { generatePkceCodes };\n//# sourceMappingURL=PkceGenerator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}