{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  constructor(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  createBatch() {\n    return new BlobBatch();\n  }\n  deleteBlobs(urlsOrBlobClients, credentialOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const batch = new BlobBatch();\n      for (const urlOrBlobClient of urlsOrBlobClients) {\n        if (typeof urlOrBlobClient === \"string\") {\n          yield batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n        } else {\n          yield batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n        }\n      }\n      return _this.submitBatch(batch);\n    })();\n  }\n  setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const batch = new BlobBatch();\n      for (const urlOrBlobClient of urlsOrBlobClients) {\n        if (typeof urlOrBlobClient === \"string\") {\n          yield batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n        } else {\n          yield batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n        }\n      }\n      return _this2.submitBatch(batch);\n    })();\n  }\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  submitBatch(batchRequest, options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n        throw new RangeError(\"Batch request should contain one or more sub requests.\");\n      }\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobBatchClient-submitBatch\", options);\n      try {\n        const batchRequestBody = batchRequest.getHttpRequestBody();\n        // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n        const rawBatchResponse = yield _this3.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));\n        // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n        const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n        const responseSummary = yield batchResponseParser.parseBatchResponse();\n        const res = {\n          _response: rawBatchResponse._response,\n          contentType: rawBatchResponse.contentType,\n          errorCode: rawBatchResponse.errorCode,\n          requestId: rawBatchResponse.requestId,\n          clientRequestId: rawBatchResponse.clientRequestId,\n          version: rawBatchResponse.version,\n          subResponses: responseSummary.subResponses,\n          subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n          subResponsesFailedCount: responseSummary.subResponsesFailedCount\n        };\n        return res;\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n}\n//# sourceMappingURL=BlobBatchClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}