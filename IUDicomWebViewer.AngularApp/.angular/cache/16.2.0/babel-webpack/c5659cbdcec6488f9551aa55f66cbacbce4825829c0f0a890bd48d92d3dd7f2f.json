{"ast":null,"code":"const fs = require(\"./fileSystem\").require();\nconst pth = require(\"path\");\nfs.existsSync = fs.existsSync || pth.existsSync;\nmodule.exports = function ( /*String*/path) {\n  var _path = path || \"\",\n    _obj = newAttr(),\n    _stat = null;\n  function newAttr() {\n    return {\n      directory: false,\n      readonly: false,\n      hidden: false,\n      executable: false,\n      mtime: 0,\n      atime: 0\n    };\n  }\n  if (_path && fs.existsSync(_path)) {\n    _stat = fs.statSync(_path);\n    _obj.directory = _stat.isDirectory();\n    _obj.mtime = _stat.mtime;\n    _obj.atime = _stat.atime;\n    _obj.executable = (0o111 & _stat.mode) !== 0; // file is executable who ever har right not just owner\n    _obj.readonly = (0o200 & _stat.mode) === 0; // readonly if owner has no write right\n    _obj.hidden = pth.basename(_path)[0] === \".\";\n  } else {\n    console.warn(\"Invalid path: \" + _path);\n  }\n  return {\n    get directory() {\n      return _obj.directory;\n    },\n    get readOnly() {\n      return _obj.readonly;\n    },\n    get hidden() {\n      return _obj.hidden;\n    },\n    get mtime() {\n      return _obj.mtime;\n    },\n    get atime() {\n      return _obj.atime;\n    },\n    get executable() {\n      return _obj.executable;\n    },\n    decodeAttributes: function () {},\n    encodeAttributes: function () {},\n    toJSON: function () {\n      return {\n        path: _path,\n        isDirectory: _obj.directory,\n        isReadOnly: _obj.readonly,\n        isHidden: _obj.hidden,\n        isExecutable: _obj.executable,\n        mTime: _obj.mtime,\n        aTime: _obj.atime\n      };\n    },\n    toString: function () {\n      return JSON.stringify(this.toJSON(), null, \"\\t\");\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}