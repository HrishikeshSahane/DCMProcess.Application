{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ThrottlingUtils {\n  /**\n   * Prepares a RequestThumbprint to be stored as a key.\n   * @param thumbprint\n   */\n  static generateThrottlingStorageKey(thumbprint) {\n    return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n  }\n  /**\n   * Performs necessary throttling checks before a network request.\n   * @param cacheManager\n   * @param thumbprint\n   */\n  static preProcess(cacheManager, thumbprint) {\n    const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    const value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  }\n  /**\n   * Performs necessary throttling checks after a network request.\n   * @param cacheManager\n   * @param thumbprint\n   * @param response\n   */\n  static postProcess(cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      const thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  }\n  /**\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\n   * @param response\n   */\n  static checkResponseStatus(response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  }\n  /**\n   * Checks a NetworkResponse object's RetryAfter header\n   * @param response\n   */\n  static checkResponseForRetryAfter(response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  }\n  /**\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n   * @param throttleTime\n   */\n  static calculateThrottleTime(throttleTime) {\n    const time = throttleTime <= 0 ? 0 : throttleTime;\n    const currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  }\n  static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n    const thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    const key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  }\n}\nexport { ThrottlingUtils };\n//# sourceMappingURL=ThrottlingUtils.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}