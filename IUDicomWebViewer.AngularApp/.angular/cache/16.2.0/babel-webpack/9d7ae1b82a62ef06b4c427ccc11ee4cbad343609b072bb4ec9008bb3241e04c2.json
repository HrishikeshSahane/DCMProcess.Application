{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DICOMViewerComponent } from '../../../projects/dicom-viewer/src/lib/dicom-viewer.component';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../projects/dicom-viewer/src/lib/dicom-viewer.component\";\nconst blobServiceClient = new BlobServiceClient(`https://iupackagecontainer.blob.core.windows.net`, new DefaultAzureCredential());\nexport let ViewDicomimagesComponent = /*#__PURE__*/(() => {\n  class ViewDicomimagesComponent {\n    constructor() {}\n    ngOnInit() {\n      cornerstoneWADOImageLoader.external.cornerstone = cornerstone; // inicializa WADO Image loader\n      // configura codecs e web workers\n      cornerstoneWADOImageLoader.webWorkerManager.initialize({\n        webWorkerPath: './assets/cornerstone/webworkers/cornerstoneWADOImageLoaderWebWorker.js',\n        taskConfiguration: {\n          'decodeTask': {\n            codecsPath: '../codecs/cornerstoneWADOImageLoaderCodecs.js'\n          }\n        }\n      });\n    }\n    /**\n     * Load selected DICOM images\n     *\n     * @param files list of selected dicom files\n     */\n    loadDICOMImages(files) {\n      if (files && files.length > 0) {\n        let imageList = [];\n        const fileList = Array.from(files);\n        fileList.sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (b.name > a.name) return -1;\n          return 0;\n        });\n        //cornerstoneWADOImageLoader.wadouri.fileManager.purge();\n        cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.purge();\n        // loop thru the File list and build a list of wadouri imageIds (dicomfile:)\n        for (let i = 0; i < fileList.length; i++) {\n          const dicomFile = fileList[i];\n          const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(dicomFile);\n          imageList.push(imageId);\n        }\n        this.viewPort.resetAllTools();\n        // now load all Images, using their wadouri\n        this.viewPort.loadStudyImages(imageList);\n      } else alert('Escolha imagens DICOM a exibir.');\n    }\n    download() {\n      return _asyncToGenerator(function* () {\n        const containerName = 'dicomblob';\n        const blobName = 'dicomblob';\n        const timestamp = Date.now();\n        const fileName = `2.57.299.2709.41320.615801.4965911.64446389.zip`;\n        // create container client\n        const containerClient = yield blobServiceClient.getContainerClient(containerName);\n        // create blob client\n        const blobClient = yield containerClient.getBlockBlobClient(blobName);\n        // download file\n        var unzip = require('unzip-stream');\n        var fs = require('fs-extra');\n        const downloadResult = yield blobClient.downloadToFile(fileName);\n        var fileblob = downloadResult.blobBody;\n        fs.createReadStream(fileblob).pipe(unzip.Extract({\n          path: './e2e'\n        }));\n      })();\n    }\n    static #_ = this.ɵfac = function ViewDicomimagesComponent_Factory(t) {\n      return new (t || ViewDicomimagesComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ViewDicomimagesComponent,\n      selectors: [[\"app-view-dicomimages\"]],\n      viewQuery: function ViewDicomimagesComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(DICOMViewerComponent, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        }\n      },\n      decls: 9,\n      vars: 3,\n      consts: [[2, \"height\", \"100%\", \"width\", \"100%\"], [2, \"display\", \"flex\", \"margin-left\", \"120px\", \"align-items\", \"center\"], [1, \"choose_file\"], [\"type\", \"file\", \"multiple\", \"\", \"accept\", \"application/dicom\", \"id\", \"imagens\", \"title\", \"selecione arquivos de imagens\", 1, \"hide_file\", 3, \"change\"], [2, \"display\", \"flex\", \"height\", \"calc(100% - 90px)\", \"width\", \"100%\"], [2, \"height\", \"100%\", \"width\", \"100%\", \"margin\", \"10px\", 3, \"enableViewerTools\", \"enablePlayTools\", \"maxImagesToLoad\"]],\n      template: function ViewDicomimagesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n          i0.ɵɵtext(3, \" DICOM Web Viewer \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2);\n          i0.ɵɵtext(5, \" Choose Your DICOM Files \");\n          i0.ɵɵelementStart(6, \"input\", 3);\n          i0.ɵɵlistener(\"change\", function ViewDicomimagesComponent_Template_input_change_6_listener($event) {\n            return ctx.loadDICOMImages($event.target.files);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 4);\n          i0.ɵɵelement(8, \"dicom-viewer\", 5);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"enableViewerTools\", true)(\"enablePlayTools\", true)(\"maxImagesToLoad\", 20);\n        }\n      },\n      dependencies: [i1.DICOMViewerComponent]\n    });\n  }\n  return ViewDicomimagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}