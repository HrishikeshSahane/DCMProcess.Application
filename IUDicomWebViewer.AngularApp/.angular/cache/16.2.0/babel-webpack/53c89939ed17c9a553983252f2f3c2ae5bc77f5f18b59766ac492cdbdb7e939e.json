{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\n   * Returns unexpired tokens from the cache, if available\n   * @param silentRequest\n   */\n  acquireToken(silentRequest) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n      // Telemetry manager only used to increment cacheHits here\n      const serverTelemetryManager = _this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n      const silentAuthClient = yield _this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n      _this.logger.verbose(\"Silent auth client created\");\n      try {\n        const response = yield invokeAsync(silentAuthClient.acquireCachedToken.bind(silentAuthClient), PerformanceEvents.SilentFlowClientAcquireCachedToken, _this.logger, _this.performanceClient, silentRequest.correlationId)(silentRequest);\n        const authResponse = response[0];\n        _this.performanceClient.addFields({\n          fromCache: true\n        }, silentRequest.correlationId);\n        return authResponse;\n      } catch (error) {\n        if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n          _this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n        }\n        throw error;\n      }\n    })();\n  }\n  /**\n   * API to silenty clear the browser cache.\n   * @param logoutRequest\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest?.account);\n  }\n  /**\n   * Creates an Silent Flow Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Create auth module.\n      const clientConfig = yield invokeAsync(_this2.getClientConfiguration.bind(_this2), PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this2.logger, _this2.performanceClient, _this2.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions);\n      return new SilentFlowClient(clientConfig, _this2.performanceClient);\n    })();\n  }\n  initializeSilentRequest(request, account) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, _this3.correlationId);\n      const baseRequest = yield invokeAsync(_this3.initializeBaseRequest.bind(_this3), PerformanceEvents.InitializeBaseRequest, _this3.logger, _this3.performanceClient, _this3.correlationId)(request, account);\n      return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false\n      };\n    })();\n  }\n}\nexport { SilentCacheClient };\n//# sourceMappingURL=SilentCacheClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}