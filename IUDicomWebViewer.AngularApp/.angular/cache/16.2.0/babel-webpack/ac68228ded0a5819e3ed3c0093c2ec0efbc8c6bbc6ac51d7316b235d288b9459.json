{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Clears hash from window url.\n */\nfunction clearHash(contentWindow) {\n  // Office.js sets history.replaceState to null\n  contentWindow.location.hash = \"\";\n  if (typeof contentWindow.history.replaceState === \"function\") {\n    // Full removes \"#\" from url\n    contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n  }\n}\n/**\n * Replaces current hash with hash from provided url\n */\nfunction replaceHash(url) {\n  const urlParts = url.split(\"#\");\n  urlParts.shift(); // Remove part before the hash\n  window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nfunction isInIframe() {\n  return window.parent !== window;\n}\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nfunction isInPopup() {\n  return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n}\n// #endregion\n/**\n * Returns current window URL as redirect uri\n */\nfunction getCurrentUri() {\n  return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n/**\n * Gets the homepage url for the current window location.\n */\nfunction getHomepage() {\n  const currentUrl = new UrlString(window.location.href);\n  const urlComponents = currentUrl.getUrlComponents();\n  return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nfunction blockReloadInHiddenIframes() {\n  const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n  // return an error if called from the hidden iframe created by the msal js silent calls\n  if (isResponseHash && isInIframe()) {\n    throw createBrowserAuthError(blockIframeReload);\n  }\n}\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nfunction blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n  const isIframedApp = isInIframe();\n  if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n    // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n    throw createBrowserAuthError(redirectInIframe);\n  }\n}\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nfunction blockAcquireTokenInPopups() {\n  // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n  if (isInPopup()) {\n    throw createBrowserAuthError(blockNestedPopups);\n  }\n}\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nfunction blockNonBrowserEnvironment(isBrowserEnvironment) {\n  if (!isBrowserEnvironment) {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n}\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nfunction blockAPICallsBeforeInitialize(initialized) {\n  if (!initialized) {\n    throw createBrowserAuthError(uninitializedPublicClientApplication);\n  }\n}\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nfunction preconnect(authority) {\n  const link = document.createElement(\"link\");\n  link.rel = \"preconnect\";\n  link.href = new URL(authority).origin;\n  link.crossOrigin = \"anonymous\";\n  document.head.appendChild(link);\n  // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n  window.setTimeout(() => {\n    try {\n      document.head.removeChild(link);\n    } catch {}\n  }, 10000); // 10s Timeout\n}\n\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, replaceHash };\n//# sourceMappingURL=BrowserUtils.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}