{"ast":null,"code":"import { DICOMViewerComponent } from '../../projects/dicom-viewer/src/lib/dicom-viewer.component';\nimport * as i0 from \"@angular/core\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    ngOnInit() {\n      cornerstoneWADOImageLoader.external.cornerstone = cornerstone; // inicializa WADO Image loader\n      // configura codecs e web workers\n      cornerstoneWADOImageLoader.webWorkerManager.initialize({\n        webWorkerPath: './assets/cornerstone/webworkers/cornerstoneWADOImageLoaderWebWorker.js',\n        taskConfiguration: {\n          'decodeTask': {\n            codecsPath: '../codecs/cornerstoneWADOImageLoaderCodecs.js'\n          }\n        }\n      });\n    }\n    /**\n     * Load selected DICOM images\n     *\n     * @param files list of selected dicom files\n     */\n    loadDICOMImages(files) {\n      if (files && files.length > 0) {\n        let imageList = [];\n        const fileList = Array.from(files);\n        fileList.sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (b.name > a.name) return -1;\n          return 0;\n        });\n        //cornerstoneWADOImageLoader.wadouri.fileManager.purge();\n        cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.purge();\n        // loop thru the File list and build a list of wadouri imageIds (dicomfile:)\n        for (let i = 0; i < fileList.length; i++) {\n          const dicomFile = fileList[i];\n          const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(dicomFile);\n          imageList.push(imageId);\n        }\n        this.viewPort.resetAllTools();\n        // now load all Images, using their wadouri\n        this.viewPort.loadStudyImages(imageList);\n      } else alert('Escolha imagens DICOM a exibir.');\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      viewQuery: function AppComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(DICOMViewerComponent, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        }\n      },\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      styles: [\".choose_file[_ngcontent-%COMP%]{padding:5px 10px;background:#00ad2d;border:1px solid #00ad2d;position:relative;color:#fff;border-radius:2px;text-align:center;float:left;cursor:pointer;margin-left:50px}.hide_file[_ngcontent-%COMP%]{position:absolute;z-index:1000;opacity:0;cursor:pointer;right:0;top:0;height:100%;font-size:24px;width:100%}\"]\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}