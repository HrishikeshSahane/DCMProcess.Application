{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nlet BridgeProxy = /*#__PURE__*/(() => {\n  class BridgeProxy {\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    static initializeNestedAppAuthBridge() {\n      return _asyncToGenerator(function* () {\n        if (window === undefined) {\n          throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n          throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n        if (window.crypto === undefined) {\n          throw new Error(\"window.crypto is undefined\");\n        }\n        try {\n          BridgeProxy.crypto = window.crypto;\n          window.nestedAppAuthBridge.addEventListener(\"message\", response => {\n            const responsePayload = typeof response === \"string\" ? response : response.data;\n            const responseEnvelope = JSON.parse(responsePayload);\n            const request = BridgeProxy.bridgeRequests.find(element => element.requestId === responseEnvelope.requestId);\n            if (request !== undefined) {\n              BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);\n              if (responseEnvelope.success) {\n                request.resolve(responseEnvelope.body);\n              } else {\n                request.reject(responseEnvelope.body);\n              }\n            }\n          });\n          const promise = new Promise((resolve, reject) => {\n            const message = {\n              messageType: \"NestedAppAuthRequest\",\n              method: \"GetInitContext\",\n              requestId: BridgeProxy.getRandomId()\n            };\n            const request = {\n              requestId: message.requestId,\n              method: message.method,\n              resolve: resolve,\n              reject: reject\n            };\n            BridgeProxy.bridgeRequests.push(request);\n            window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n          });\n          return yield promise;\n        } catch (error) {\n          window.console.log(error);\n          throw error;\n        }\n      })();\n    }\n    static getRandomId() {\n      return BridgeProxy.crypto.randomUUID();\n    }\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    getTokenInteractive(request) {\n      return this.sendRequest(\"GetTokenPopup\", request);\n    }\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    getTokenSilent(request) {\n      return this.sendRequest(\"GetToken\", request);\n    }\n    /**\n     * getAccountInfo - Gets account information from the bridge\n     *\n     * @param request A request for account information\n     */\n    getAccountInfo(request) {\n      let method = \"GetAccountByHomeId\";\n      if (request.homeAccountId !== undefined) {\n        method = \"GetAccountByHomeId\";\n      }\n      if (request.localAccountId !== undefined) {\n        method = \"GetAccountByLocalId\";\n      }\n      if (request.username !== undefined) {\n        method = \"GetAccountByUsername\";\n      }\n      return this.sendRequest(method, request);\n    }\n    getActiveAccount() {\n      return this.sendRequest(\"GetActiveAccount\", undefined);\n    }\n    getHostCapabilities() {\n      return this.capabilities ?? null;\n    }\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    sendRequest(method, request) {\n      const message = {\n        messageType: \"NestedAppAuthRequest\",\n        method: method,\n        requestId: BridgeProxy.getRandomId(),\n        body: request\n      };\n      const promise = new Promise((resolve, reject) => {\n        const request = {\n          requestId: message.requestId,\n          method: message.method,\n          resolve: resolve,\n          reject: reject\n        };\n        BridgeProxy.bridgeRequests.push(request);\n        window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n      });\n      return promise;\n    }\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    constructor(sdkName, sdkVersion, capabilities) {\n      this.sdkName = sdkName;\n      this.sdkVersion = sdkVersion;\n      this.capabilities = capabilities;\n    }\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    static create() {\n      return _asyncToGenerator(function* () {\n        const response = yield BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(response.sdkName, response.sdkVersion, response.capabilities);\n      })();\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  BridgeProxy.bridgeRequests = [];\n  return BridgeProxy;\n})();\nexport { BridgeProxy, BridgeProxy as default };\n//# sourceMappingURL=BridgeProxy.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}