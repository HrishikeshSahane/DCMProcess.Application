{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { createJoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonWebTokenTypes } from '../utils/Constants.mjs';\nimport { missingKidError, missingAlgError } from '../error/JoseHeaderErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass JoseHeader {\n  constructor(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\n   * Builds SignedHttpRequest formatted JOSE Header from the\n   * JOSE Header options provided or previously set on the object and returns\n   * the stringified header object.\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n   * @param shrHeaderOptions\n   * @returns\n   */\n  static getShrHeaderString(shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw createJoseHeaderError(missingKidError);\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw createJoseHeaderError(missingAlgError);\n    }\n    const shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  }\n}\nexport { JoseHeader };\n//# sourceMappingURL=JoseHeader.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}