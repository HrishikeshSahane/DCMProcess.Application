{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ServerTelemetryManager {\n  constructor(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\n   * API to add MSER Telemetry to request\n   */\n  generateCurrentRequestHeaderValue() {\n    const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n    const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const regionDiscoveryFields = this.getRegionDiscoveryFields();\n    const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to add MSER Telemetry for the last failed request\n   */\n  generateLastRequestHeaderValue() {\n    const lastRequests = this.getLastRequests();\n    const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to cache token failures for MSER data capture\n   * @param error\n   */\n  cacheFailedRequest(error) {\n    const lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (error instanceof Error && !!error && error.toString()) {\n      if (error instanceof AuthError) {\n        if (error.subError) {\n          lastRequests.errors.push(error.subError);\n        } else if (error.errorCode) {\n          lastRequests.errors.push(error.errorCode);\n        } else {\n          lastRequests.errors.push(error.toString());\n        }\n      } else {\n        lastRequests.errors.push(error.toString());\n      }\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  }\n  /**\n   * Update server telemetry cache entry by incrementing cache hit counter\n   */\n  incrementCacheHits() {\n    const lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  }\n  /**\n   * Get the server telemetry entity from cache or initialize a new one\n   */\n  getLastRequests() {\n    const initialValue = {\n      failedRequests: [],\n      errors: [],\n      cacheHits: 0\n    };\n    const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  }\n  /**\n   * Remove server telemetry cache entry\n   */\n  clearTelemetryCache() {\n    const lastRequests = this.getLastRequests();\n    const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      const serverTelemEntity = {\n        failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n        errors: lastRequests.errors.slice(numErrorsFlushed),\n        cacheHits: 0\n      };\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  }\n  /**\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\n   * @param serverTelemetryEntity\n   */\n  static maxErrorsToSend(serverTelemetryEntity) {\n    let i;\n    let maxErrors = 0;\n    let dataSize = 0;\n    const errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      const apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  }\n  /**\n   * Get the region discovery fields\n   *\n   * @returns string\n   */\n  getRegionDiscoveryFields() {\n    const regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  }\n  /**\n   * Update the region discovery metadata\n   *\n   * @param regionDiscoveryMetadata\n   * @returns void\n   */\n  updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  }\n  /**\n   * Set cache outcome\n   */\n  setCacheOutcome(cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  }\n}\nexport { ServerTelemetryManager };\n//# sourceMappingURL=ServerTelemetryManager.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}