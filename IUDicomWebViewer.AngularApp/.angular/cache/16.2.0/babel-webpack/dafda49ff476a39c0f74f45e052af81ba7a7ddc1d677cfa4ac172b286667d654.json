{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { checkTenantId, processMultiTenantRequest, resolveAdditionallyAllowedTenantIds } from \"../util/tenantIdUtils\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatSuccess } from \"../util/logging\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Microsoft Entra ID with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential {\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Microsoft Entra ID with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Microsoft Entra tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantIdOrName, clientId, username, password, options) {\n    checkTenantId(logger, tenantIdOrName);\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"UsernamePasswordCredential.getToken\", options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (newOptions) {\n          const tenantId = processMultiTenantRequest(_this.tenantId, newOptions, _this.additionallyAllowedTenantIds);\n          newOptions.tenantId = tenantId;\n          const urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n          const params = new URLSearchParams({\n            response_type: \"token\",\n            grant_type: \"password\",\n            client_id: _this.clientId,\n            username: _this.username,\n            password: _this.password,\n            scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n          });\n          const webResource = createPipelineRequest({\n            url: `${_this.identityClient.authorityHost}/${_this.tenantId}/${urlSuffix}`,\n            method: \"POST\",\n            body: params.toString(),\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }),\n            abortSignal: options && options.abortSignal,\n            tracingOptions: newOptions.tracingOptions\n          });\n          const tokenResponse = yield _this.identityClient.sendTokenRequest(webResource);\n          logger.getToken.info(formatSuccess(scopes));\n          return tokenResponse && tokenResponse.accessToken || null;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\n//# sourceMappingURL=usernamePasswordCredential.browser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}