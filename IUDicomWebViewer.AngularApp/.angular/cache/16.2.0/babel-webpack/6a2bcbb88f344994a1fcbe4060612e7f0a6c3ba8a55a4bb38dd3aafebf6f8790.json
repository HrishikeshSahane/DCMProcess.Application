{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\nimport { BridgeProxy } from '../naa/BridgeProxy.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nlet TeamsAppOperatingContext = /*#__PURE__*/(() => {\n  class TeamsAppOperatingContext extends BaseOperatingContext {\n    constructor() {\n      super(...arguments);\n      this.bridgeProxy = undefined;\n      this.activeAccount = undefined;\n    }\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName() {\n      return TeamsAppOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId() {\n      return TeamsAppOperatingContext.ID;\n    }\n    getBridgeProxy() {\n      return this.bridgeProxy;\n    }\n    getActiveAccount() {\n      return this.activeAccount;\n    }\n    setActiveAccount(account) {\n      this.activeAccount = account;\n    }\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    initialize() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        /*\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\n         *\n         */\n        try {\n          if (typeof window !== \"undefined\") {\n            const bridgeProxy = yield BridgeProxy.create();\n            /*\n             * Because we want single sign on we need to attempt to\n             * grab the active account as part of initialization\n             * this.activeAccount = await bridgeProxy.getActiveAccount();\n             */\n            try {\n              if (bridgeProxy.getHostCapabilities()?.queryAccount) {\n                _this.activeAccount = yield bridgeProxy.getActiveAccount();\n              }\n            } catch (e) {\n              _this.activeAccount = undefined;\n            }\n            _this.bridgeProxy = bridgeProxy;\n            _this.available = bridgeProxy !== undefined;\n          } else {\n            _this.available = false;\n          }\n        } catch (e) {\n          _this.available = false;\n        } finally {\n          return _this.available;\n        }\n      })();\n    }\n  }\n  /*\n   * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n   * containing the implementation for this operating context\n   */\n\n  /**\n   * Unique identifier for the operating context\n   */\n  TeamsAppOperatingContext.MODULE_NAME = \"\";\n  TeamsAppOperatingContext.ID = \"TeamsAppOperatingContext\";\n  return TeamsAppOperatingContext;\n})();\nexport { TeamsAppOperatingContext };\n//# sourceMappingURL=TeamsAppOperatingContext.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}