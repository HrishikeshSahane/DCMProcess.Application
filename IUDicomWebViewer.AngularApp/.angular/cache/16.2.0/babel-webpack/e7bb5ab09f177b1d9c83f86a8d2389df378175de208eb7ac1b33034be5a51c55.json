{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { AuthorityFactory } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates default headers for requests to token endpoint\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\n   * Http post to token endpoint\n   * @param tokenEndpoint\n   * @param queryString\n   * @param headers\n   * @param thumbprint\n   */\n  executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (queuedEvent) {\n        _this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n      }\n      const response = yield _this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n        body: queryString,\n        headers: headers\n      });\n      _this.performanceClient?.addFields({\n        refreshTokenSize: response.body.refresh_token?.length || 0,\n        httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\"\n      }, correlationId);\n      if (_this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n        // Telemetry data successfully logged by server, clear Telemetry cache\n        _this.config.serverTelemetryManager.clearTelemetryCache();\n      }\n      return response;\n    })();\n  }\n  /**\n   * Updates the authority object of the client. Endpoint discovery must be completed.\n   * @param updatedAuthority\n   */\n  updateAuthority(cloudInstanceHostname, correlationId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n      const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${_this2.authority.tenant}/`;\n      const cloudInstanceAuthority = yield AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, _this2.networkClient, _this2.cacheManager, _this2.authority.options, _this2.logger, _this2.performanceClient, correlationId);\n      _this2.authority = cloudInstanceAuthority;\n    })();\n  }\n  /**\n   * Creates query string for the /token request\n   * @param request\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };\n//# sourceMappingURL=BaseClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}