{"ast":null,"code":"import _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getErrorFromResponse, getOperationLocation, getOperationStatus, getResourceLocation, getStatusFromInitialResponse, inferLroMode, isOperationError, parseRetryAfter } from \"./operation\";\nimport { buildCreatePoller } from \"../poller/poller\";\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport function createHttpPoller(_x, _x2) {\n  return _createHttpPoller.apply(this, arguments);\n}\n//# sourceMappingURL=poller.js.map\nfunction _createHttpPoller() {\n  _createHttpPoller = _asyncToGenerator(function* (lro, options) {\n    const {\n      resourceLocationConfig,\n      intervalInMs,\n      processResult,\n      restoreFrom,\n      updateState,\n      withOperationLocation,\n      resolveOnUnsuccessful = false\n    } = options || {};\n    return buildCreatePoller({\n      getStatusFromInitialResponse,\n      getStatusFromPollResponse: getOperationStatus,\n      isOperationError,\n      getOperationLocation,\n      getResourceLocation,\n      getPollingInterval: parseRetryAfter,\n      getError: getErrorFromResponse,\n      resolveOnUnsuccessful\n    })({\n      init: function () {\n        var _ref = _asyncToGenerator(function* () {\n          const response = yield lro.sendInitialRequest();\n          const config = inferLroMode({\n            rawResponse: response.rawResponse,\n            requestPath: lro.requestPath,\n            requestMethod: lro.requestMethod,\n            resourceLocationConfig\n          });\n          return Object.assign({\n            response,\n            operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n            resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n          }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n            metadata: {\n              mode: config.mode\n            }\n          } : {});\n        });\n        return function init() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      poll: lro.sendPollRequest\n    }, {\n      intervalInMs,\n      withOperationLocation,\n      restoreFrom,\n      updateState,\n      processResult: processResult ? ({\n        flatResponse\n      }, state) => processResult(flatResponse, state) : ({\n        flatResponse\n      }) => flatResponse\n    });\n  });\n  return _createHttpPoller.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}