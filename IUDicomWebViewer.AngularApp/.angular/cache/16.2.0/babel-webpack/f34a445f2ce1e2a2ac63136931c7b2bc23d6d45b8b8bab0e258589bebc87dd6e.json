{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\nimport _asyncToGenerator from \"D:/Hrishikesh/IUBH/Thesis/PoC/DICOMImageProcessing_Application/IUDicomWebViewer.AngularApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst KeyLocation = {\n  SW: \"sw\",\n  UHW: \"uhw\"\n};\n/** @internal */\nclass PopTokenGenerator {\n  constructor(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n   * @param request\n   * @returns\n   */\n  generateCnf(request, logger) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n      const reqCnf = yield invokeAsync(_this.generateKid.bind(_this), PerformanceEvents.PopTokenGenerateCnf, logger, _this.performanceClient, request.correlationId)(request);\n      const reqCnfString = _this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n      return {\n        kid: reqCnf.kid,\n        reqCnfString,\n        reqCnfHash: yield _this.cryptoUtils.hashString(reqCnfString)\n      };\n    })();\n  }\n  /**\n   * Generates key_id for a SHR token request\n   * @param request\n   * @returns\n   */\n  generateKid(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n      const kidThumbprint = yield _this2.cryptoUtils.getPublicKeyThumbprint(request);\n      return {\n        kid: kidThumbprint,\n        xms_ksl: KeyLocation.SW\n      };\n    })();\n  }\n  /**\n   * Signs the POP access_token with the local generated key-pair\n   * @param accessToken\n   * @param request\n   * @returns\n   */\n  signPopToken(accessToken, keyId, request) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.signPayload(accessToken, keyId, request);\n    })();\n  }\n  /**\n   * Utility function to generate the signed JWT for an access_token\n   * @param payload\n   * @param kid\n   * @param request\n   * @param claims\n   * @returns\n   */\n  signPayload(payload, keyId, request, claims) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Deconstruct request to extract SHR parameters\n      const {\n        resourceRequestMethod,\n        resourceRequestUri,\n        shrClaims,\n        shrNonce,\n        shrOptions\n      } = request;\n      const resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n      const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n      return _this4.cryptoUtils.signJwt({\n        at: payload,\n        ts: TimeUtils.nowSeconds(),\n        m: resourceRequestMethod?.toUpperCase(),\n        u: resourceUrlComponents?.HostNameAndPort,\n        nonce: shrNonce || _this4.cryptoUtils.createNewGuid(),\n        p: resourceUrlComponents?.AbsolutePath,\n        q: resourceUrlComponents?.QueryString ? [[], resourceUrlComponents.QueryString] : undefined,\n        client_claims: shrClaims || undefined,\n        ...claims\n      }, keyId, shrOptions, request.correlationId);\n    })();\n  }\n}\nexport { PopTokenGenerator };\n//# sourceMappingURL=PopTokenGenerator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}